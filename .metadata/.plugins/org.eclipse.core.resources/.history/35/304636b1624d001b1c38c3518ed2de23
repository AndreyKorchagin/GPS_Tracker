/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.h
  * @brief          : Header for main.c file.
  *                   This file contains the common defines of the application.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//#include "GPS.h"
#include "stdlib.h"
#include "stdio.h"
#include "string.h"
/* USER CODE END Includes */

/* Exported types ------------------------------------------------------------*/
/* USER CODE BEGIN ET */
char Time[12] = ""; //время
char Status[2] = ""; //валидность
char SLatitude[16] = "";  //Латитуда
char NS[3] = "";                          //
char SLongitude[12] = "";         //Лонгитуда
char EW[3] = "";                          //
char CourseTrue[10] = "";                 // курс
char Data[12] = "";                               //Дата
char SatCount[4] = "";                    //используемых спутников
char AltitudaMSL[12] = "";            //высота
char ViewSat[4];   //
char COG[8] = "";                 //
char COGstat[4] = "";             //
char Speed[8] = "";                       //скорость
char SpeedAlt[8] = "";    //
char UNUSED[32] = "";                //мусорка, тут все данные, которые не нужны
char Knot[8] = "";
char PositionMode[3] = "";
char *const RMC[] = { Time, Status, SLatitude, NS, SLongitude, EW, Speed,
		CourseTrue, Data, UNUSED, UNUSED, PositionMode };

char *const GGA[] = { UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, SatCount,
		UNUSED, AltitudaMSL, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED,
		UNUSED };

char *const GSV[] = { UNUSED, UNUSED, ViewSat, UNUSED, UNUSED, UNUSED, UNUSED,
		UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED,
		UNUSED, UNUSED, UNUSED, UNUSED, UNUSED };

char *const VTG[] = { COG, COGstat, UNUSED, UNUSED, Knot, UNUSED, Speed, UNUSED,
		UNUSED, UNUSED };

unsigned char GLONAS_COUNT = 0;
unsigned char GPS_COUNT = 0;
volatile char DataDone = 0;
unsigned char DataValid = 0;

/* USER CODE END ET */

/* Exported constants --------------------------------------------------------*/
/* USER CODE BEGIN EC */

/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */

/* USER CODE END EM */

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */
void Parser(unsigned char data){
	static unsigned char ByteCount = 0xff;
		static unsigned int MsgType;
		static char *MsgTxt = (char*) &MsgType;
		static unsigned char ComaPoint = 0xff;
		static unsigned char CharPoint = 0;
		if (data == '$') {
			ByteCount = 0;
			ComaPoint = 0xff;
			MsgTxt = (char*) &MsgType;
			return;
		} //ждем начала стрки
		if (ByteCount == 0xff)
			return;                                                               //
		ByteCount++;
		if (ByteCount <= 1)
			return;                                                         //
		if (ByteCount < 6 && ByteCount > 1)            //берем 4 символа заголовка
				{
			*MsgTxt = data; //и делаем из него число
			MsgTxt++;
			return;
		}
	//
		switch (MsgType) {
		case 0x434D5250:                             //GPRMC
		case 0x434D524E:                             //GNRMC
			if (data == ',') {
				ComaPoint++;
				CharPoint = 0;
				RMC[ComaPoint][0] = 0;
				return;
			}
			if (data == '*') {
				MsgType = 0;
				return;
			}
			RMC[ComaPoint][CharPoint++] = data;
			RMC[ComaPoint][CharPoint] = 0;
			return;
		case 0x41474750:                             //PGGA
		case 0x4147474e:                             //NGGA
			if (data == ',') {
				ComaPoint++;
				CharPoint = 0;
				GGA[ComaPoint][0] = 0;
				return;
			}
			if (data == '*') {
				MsgType = 0;
				return;
			}
			GGA[ComaPoint][CharPoint++] = data;
			GGA[ComaPoint][CharPoint] = 0;
			return;
		case 0x47545650:             //PVTG
			if (data == ',') {
				ComaPoint++;
				CharPoint = 0;
				VTG[ComaPoint][0] = 0;
				return;
			}
			if (data == '*') {
				return;
			}
			VTG[ComaPoint][CharPoint++] = data;
			VTG[ComaPoint][CharPoint] = 0;
			return;
		case 0x4754564e:             //NVTG
			if (data == ',') {
				ComaPoint++;
				CharPoint = 0;
				VTG[ComaPoint][0] = 0;
				return;
			}
			if (data == '*') {
				return;
			}
			VTG[ComaPoint][CharPoint++] = data;
			VTG[ComaPoint][CharPoint] = 0;
			return;
		case 0x56534750:             //PGSV
			if (data == ',') {
				ComaPoint++;
				CharPoint = 0;
				GSV[ComaPoint][0] = 0;
				return;
			}
			if (data == '*') {
	//			GPS_COUNT = AsciiToInt(ViewSat);
				MsgType = 0;
				return;
			}
			GSV[ComaPoint][CharPoint++] = data;
			GSV[ComaPoint][CharPoint] = 0;
			return;
		case 0x5653474c:             //LGSV
			if (data == ',') {
				ComaPoint++;
				CharPoint = 0;
				GSV[ComaPoint][0] = 0;
				return;
			}
			if (data == '*') {
	//			GLONAS_COUNT = AsciiToInt(ViewSat);
				MsgType = 0;
				return;
			}
			GSV[ComaPoint][CharPoint++] = data;
			GSV[ComaPoint][CharPoint] = 0;
			return;
		default:
			ByteCount = 0xff;
			break;
		}
		ByteCount = 0xff;
}
/* USER CODE END EFP */

/* Private defines -----------------------------------------------------------*/
/* USER CODE BEGIN Private defines */

/* USER CODE END Private defines */

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
