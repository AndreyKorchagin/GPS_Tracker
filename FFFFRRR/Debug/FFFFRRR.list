
FFFFRRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080049cc  080049cc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049cc  080049cc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000018  080049ec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  080049ec  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129e1  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a06  00000000  00000000  00032a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000130ee  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1fb  00000000  00000000  0004a60e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071e81  00000000  00000000  00058809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca68a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  000ca708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800459c 	.word	0x0800459c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	0800459c 	.word	0x0800459c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
return 0;
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
	...

0800023c <displaySPI2_Init>:
#include "stdbool.h"
#include "string.h"
#include "stdlib.h"
#include "stdio.h"

void displaySPI2_Init(void) {
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000240:	4b4a      	ldr	r3, [pc, #296]	; (800036c <displaySPI2_Init+0x130>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a49      	ldr	r2, [pc, #292]	; (800036c <displaySPI2_Init+0x130>)
 8000246:	f043 0309 	orr.w	r3, r3, #9
 800024a:	6193      	str	r3, [r2, #24]

	GPIOB->CRH &= ~(GPIO_CRH_CNF13_0 | GPIO_CRH_CNF15_0);
 800024c:	4b48      	ldr	r3, [pc, #288]	; (8000370 <displaySPI2_Init+0x134>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a47      	ldr	r2, [pc, #284]	; (8000370 <displaySPI2_Init+0x134>)
 8000252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000256:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800025a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_CNF13_1 | GPIO_CRH_CNF15_1);
 800025c:	4b44      	ldr	r3, [pc, #272]	; (8000370 <displaySPI2_Init+0x134>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a43      	ldr	r2, [pc, #268]	; (8000370 <displaySPI2_Init+0x134>)
 8000262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800026a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_MODE13_0 | GPIO_CRH_MODE15_0);
 800026c:	4b40      	ldr	r3, [pc, #256]	; (8000370 <displaySPI2_Init+0x134>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a3f      	ldr	r2, [pc, #252]	; (8000370 <displaySPI2_Init+0x134>)
 8000272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000276:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800027a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_MODE13_1 | GPIO_CRH_MODE15_1);
 800027c:	4b3c      	ldr	r3, [pc, #240]	; (8000370 <displaySPI2_Init+0x134>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a3b      	ldr	r2, [pc, #236]	; (8000370 <displaySPI2_Init+0x134>)
 8000282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800028a:	6053      	str	r3, [r2, #4]

	GPIOB->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_CNF14);
 800028c:	4b38      	ldr	r3, [pc, #224]	; (8000370 <displaySPI2_Init+0x134>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a37      	ldr	r2, [pc, #220]	; (8000370 <displaySPI2_Init+0x134>)
 8000292:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000296:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800029a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_MODE11_0 | GPIO_CRH_MODE14_0);
 800029c:	4b34      	ldr	r3, [pc, #208]	; (8000370 <displaySPI2_Init+0x134>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a33      	ldr	r2, [pc, #204]	; (8000370 <displaySPI2_Init+0x134>)
 80002a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002aa:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_MODE11_1 | GPIO_CRH_MODE14_1);
 80002ac:	4b30      	ldr	r3, [pc, #192]	; (8000370 <displaySPI2_Init+0x134>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a2f      	ldr	r2, [pc, #188]	; (8000370 <displaySPI2_Init+0x134>)
 80002b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ba:	6053      	str	r3, [r2, #4]

	GPIOB->CRH &= ~GPIO_CRH_CNF10;
 80002bc:	4b2c      	ldr	r3, [pc, #176]	; (8000370 <displaySPI2_Init+0x134>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a2b      	ldr	r2, [pc, #172]	; (8000370 <displaySPI2_Init+0x134>)
 80002c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002c6:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_MODE10;
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <displaySPI2_Init+0x134>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a28      	ldr	r2, [pc, #160]	; (8000370 <displaySPI2_Init+0x134>)
 80002ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002d2:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE10_1;
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <displaySPI2_Init+0x134>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a25      	ldr	r2, [pc, #148]	; (8000370 <displaySPI2_Init+0x134>)
 80002da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002de:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <displaySPI2_Init+0x130>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <displaySPI2_Init+0x130>)
 80002e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ea:	61d3      	str	r3, [r2, #28]

	SPI2->CR1 |= SPI_CR1_BIDIMODE;
 80002ec:	4b21      	ldr	r3, [pc, #132]	; (8000374 <displaySPI2_Init+0x138>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a20      	ldr	r2, [pc, #128]	; (8000374 <displaySPI2_Init+0x138>)
 80002f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002f6:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_BIDIOE;
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <displaySPI2_Init+0x138>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <displaySPI2_Init+0x138>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~SPI_CR1_DFF;  // 8 	bit
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <displaySPI2_Init+0x138>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1a      	ldr	r2, [pc, #104]	; (8000374 <displaySPI2_Init+0x138>)
 800030a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800030e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_CPOL;  // SPI-3
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <displaySPI2_Init+0x138>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <displaySPI2_Init+0x138>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_CPHA;  // SPI-3
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <displaySPI2_Init+0x138>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <displaySPI2_Init+0x138>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_BR;    // Baud rate control
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <displaySPI2_Init+0x138>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <displaySPI2_Init+0x138>)
 800032e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000332:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~SPI_CR1_LSBFIRST;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <displaySPI2_Init+0x138>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <displaySPI2_Init+0x138>)
 800033a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800033e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <displaySPI2_Init+0x138>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <displaySPI2_Init+0x138>)
 8000346:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800034a:	6013      	str	r3, [r2, #0]

	SPI2->CR1 |= SPI_CR1_MSTR;  // MASTER
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <displaySPI2_Init+0x138>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a08      	ldr	r2, [pc, #32]	; (8000374 <displaySPI2_Init+0x138>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SPE;   // turn on SPI
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <displaySPI2_Init+0x138>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a05      	ldr	r2, [pc, #20]	; (8000374 <displaySPI2_Init+0x138>)
 800035e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000
 8000370:	40010c00 	.word	0x40010c00
 8000374:	40003800 	.word	0x40003800

08000378 <SPI2_Write>:
void SPI2_Write(uint8_t data) {
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	SPI2->DR = data;
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <SPI2_Write+0x38>)
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	60d3      	str	r3, [r2, #12]
	while (!(SPI2->SR & SPI_SR_TXE))
 8000388:	bf00      	nop
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <SPI2_Write+0x38>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	f003 0302 	and.w	r3, r3, #2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f9      	beq.n	800038a <SPI2_Write+0x12>
		;
	while (SPI2->SR & SPI_SR_BSY)
 8000396:	bf00      	nop
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SPI2_Write+0x38>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f9      	bne.n	8000398 <SPI2_Write+0x20>
		;
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40003800 	.word	0x40003800

080003b4 <display_cmd>:
void display_cmd(uint8_t data) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	GPIOB->BRR |= GPIO_BRR_BR14;
 80003be:	4b07      	ldr	r3, [pc, #28]	; (80003dc <display_cmd+0x28>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a06      	ldr	r2, [pc, #24]	; (80003dc <display_cmd+0x28>)
 80003c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003c8:	6153      	str	r3, [r2, #20]
	SPI2_Write(data);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffd3 	bl	8000378 <SPI2_Write>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010c00 	.word	0x40010c00

080003e0 <display_data>:
void display_data(uint8_t data) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR |= GPIO_BSRR_BS14;
 80003ea:	4b07      	ldr	r3, [pc, #28]	; (8000408 <display_data+0x28>)
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <display_data+0x28>)
 80003f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f4:	6113      	str	r3, [r2, #16]
	SPI2_Write(data);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffbd 	bl	8000378 <SPI2_Write>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010c00 	.word	0x40010c00

0800040c <display_Init>:
void display_Init(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= GPIO_BSRR_BR10;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <display_Init+0x44>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <display_Init+0x44>)
 8000416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800041a:	6113      	str	r3, [r2, #16]
	GPIOB->BSRR |= GPIO_BSRR_BS10;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <display_Init+0x44>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <display_Init+0x44>)
 8000422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000426:	6113      	str	r3, [r2, #16]
	display_cmd(0x21);
 8000428:	2021      	movs	r0, #33	; 0x21
 800042a:	f7ff ffc3 	bl	80003b4 <display_cmd>
	display_cmd(0x14);
 800042e:	2014      	movs	r0, #20
 8000430:	f7ff ffc0 	bl	80003b4 <display_cmd>
	display_cmd(0x04);
 8000434:	2004      	movs	r0, #4
 8000436:	f7ff ffbd 	bl	80003b4 <display_cmd>
	display_cmd(0xB8);
 800043a:	20b8      	movs	r0, #184	; 0xb8
 800043c:	f7ff ffba 	bl	80003b4 <display_cmd>
	display_cmd(0x20);
 8000440:	2020      	movs	r0, #32
 8000442:	f7ff ffb7 	bl	80003b4 <display_cmd>
	display_cmd(0xC);
 8000446:	200c      	movs	r0, #12
 8000448:	f7ff ffb4 	bl	80003b4 <display_cmd>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40010c00 	.word	0x40010c00

08000454 <display_light_on>:
void display_light_on(void) {
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <display_light_on+0x48>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a0f      	ldr	r2, [pc, #60]	; (800049c <display_light_on+0x48>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]

	GPIOB->CRH &= ~GPIO_CRH_CNF12;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <display_light_on+0x4c>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <display_light_on+0x4c>)
 800046a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800046e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE12_1;
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <display_light_on+0x4c>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <display_light_on+0x4c>)
 8000476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_MODE12_0;
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <display_light_on+0x4c>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <display_light_on+0x4c>)
 8000482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000486:	6053      	str	r3, [r2, #4]
	GPIOB->BSRR |= GPIO_BSRR_BS12;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <display_light_on+0x4c>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <display_light_on+0x4c>)
 800048e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000492:	6113      	str	r3, [r2, #16]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <display_setpos>:
void display_light_off(void) {
	GPIOB->BSRR |= GPIO_BSRR_BR12;
}
void display_setpos(uint8_t x, uint8_t y) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	460a      	mov	r2, r1
 80004ae:	71fb      	strb	r3, [r7, #7]
 80004b0:	4613      	mov	r3, r2
 80004b2:	71bb      	strb	r3, [r7, #6]
	display_cmd(0x80 + x);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	3b80      	subs	r3, #128	; 0x80
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff7a 	bl	80003b4 <display_cmd>
	display_cmd(0x40 + y);
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	3340      	adds	r3, #64	; 0x40
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff74 	bl	80003b4 <display_cmd>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <display_clear>:
void display_clear(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 6; y++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	e00e      	b.n	80004fe <display_clear+0x2a>
		for (uint8_t x = 0; x < 84; x++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	71bb      	strb	r3, [r7, #6]
 80004e4:	e005      	b.n	80004f2 <display_clear+0x1e>
			display_data(0);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff ff7a 	bl	80003e0 <display_data>
		for (uint8_t x = 0; x < 84; x++) {
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	3301      	adds	r3, #1
 80004f0:	71bb      	strb	r3, [r7, #6]
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	2b53      	cmp	r3, #83	; 0x53
 80004f6:	d9f6      	bls.n	80004e6 <display_clear+0x12>
	for (uint8_t y = 0; y < 6; y++) {
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	3301      	adds	r3, #1
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b05      	cmp	r3, #5
 8000502:	d9ed      	bls.n	80004e0 <display_clear+0xc>
		}
	}
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <printchar>:

void printchar(uint8_t ch) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	int i;
	if (ch >= 0x20 && ch <= 0x80) {
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b1f      	cmp	r3, #31
 800051a:	d91f      	bls.n	800055c <printchar+0x50>
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b80      	cmp	r3, #128	; 0x80
 8000520:	d81c      	bhi.n	800055c <printchar+0x50>
		display_data(0x00);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ff5c 	bl	80003e0 <display_data>
		for (i = 0; i < 5; i++) {
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e010      	b.n	8000550 <printchar+0x44>
			display_data(ASCII[ch - 0x20][i]);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f1a3 0220 	sub.w	r2, r3, #32
 8000534:	490b      	ldr	r1, [pc, #44]	; (8000564 <printchar+0x58>)
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	18ca      	adds	r2, r1, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff4b 	bl	80003e0 <display_data>
		for (i = 0; i < 5; i++) {
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3301      	adds	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b04      	cmp	r3, #4
 8000554:	ddeb      	ble.n	800052e <printchar+0x22>
		}
		display_data(0x00);
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff ff42 	bl	80003e0 <display_data>
	}
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	080046c0 	.word	0x080046c0

08000568 <printstring_at>:
		printchar(*str);
		str++;
	}
}

void printstring_at(char *str, uint8_t x, uint8_t y) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	70bb      	strb	r3, [r7, #2]
	display_setpos(x, y);
 8000578:	78ba      	ldrb	r2, [r7, #2]
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	4611      	mov	r1, r2
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ff90 	bl	80004a4 <display_setpos>
	while (*str) {
 8000584:	e007      	b.n	8000596 <printstring_at+0x2e>
		printchar(*str);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffbe 	bl	800050c <printchar>
		str++;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f3      	bne.n	8000586 <printstring_at+0x1e>
	}
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ae:	f000 fe9a 	bl	80012e6 <HAL_Init>

	/* USER CODE BEGIN Init */
	displaySPI2_Init();
 80005b2:	f7ff fe43 	bl	800023c <displaySPI2_Init>
	display_Init();
 80005b6:	f7ff ff29 	bl	800040c <display_Init>
	display_light_on();
 80005ba:	f7ff ff4b 	bl	8000454 <display_light_on>
	display_clear();
 80005be:	f7ff ff89 	bl	80004d4 <display_clear>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c2:	f000 f86b 	bl	800069c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c6:	f000 f8fb 	bl	80007c0 <MX_GPIO_Init>
	MX_DMA_Init();
 80005ca:	f000 f8d3 	bl	8000774 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80005ce:	f000 f8a7 	bl	8000720 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f000 feaf 	bl	8001338 <HAL_Delay>

	HAL_UART_Transmit(&huart1,
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	2233      	movs	r2, #51	; 0x33
 80005de:	4925      	ldr	r1, [pc, #148]	; (8000674 <main+0xcc>)
 80005e0:	4825      	ldr	r0, [pc, #148]	; (8000678 <main+0xd0>)
 80005e2:	f002 fa56 	bl	8002a92 <HAL_UART_Transmit>
			"$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n", 51, 100);
	HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f000 fea5 	bl	8001338 <HAL_Delay>
//	HAL_UART_Receive_DMA(&huart1, answer, 17);
//	if (strncmp(answer, "$PMTK001,314,3*36", 17) == 0){
//		GPIOC->ODR ^= GPIO_ODR_ODR9;
//	}

	HAL_UART_Transmit(&huart1, "$PMTK102*31\r\n", 13, 30);
 80005ee:	231e      	movs	r3, #30
 80005f0:	220d      	movs	r2, #13
 80005f2:	4922      	ldr	r1, [pc, #136]	; (800067c <main+0xd4>)
 80005f4:	4820      	ldr	r0, [pc, #128]	; (8000678 <main+0xd0>)
 80005f6:	f002 fa4c 	bl	8002a92 <HAL_UART_Transmit>
	HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fe:	f000 fe9b 	bl	8001338 <HAL_Delay>

	printstring_at("No signal", 10, 2);
 8000602:	2202      	movs	r2, #2
 8000604:	210a      	movs	r1, #10
 8000606:	481e      	ldr	r0, [pc, #120]	; (8000680 <main+0xd8>)
 8000608:	f7ff ffae 	bl	8000568 <printstring_at>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of LCDPrint */
	osThreadDef(LCDPrint, StartLCDPrint, osPriorityNormal, 0, 128);
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <main+0xdc>)
 800060e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	6023      	str	r3, [r4, #0]
	LCDPrintHandle = osThreadCreate(osThread(LCDPrint), NULL);
 800061c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 ff72 	bl	800350c <osThreadCreate>
 8000628:	4602      	mov	r2, r0
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <main+0xe0>)
 800062c:	601a      	str	r2, [r3, #0]

	/* definition and creation of UART_DMAParser */
	osThreadDef(UART_DMAParser, StartUART_DMAParser, osPriorityLow, 0, 128);
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <main+0xe4>)
 8000630:	f107 0418 	add.w	r4, r7, #24
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	682b      	ldr	r3, [r5, #0]
 800063c:	6023      	str	r3, [r4, #0]
	UART_DMAParserHandle = osThreadCreate(osThread(UART_DMAParser), NULL);
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 ff61 	bl	800350c <osThreadCreate>
 800064a:	4602      	mov	r2, r0
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0xe8>)
 800064e:	601a      	str	r2, [r3, #0]

	/* definition and creation of NMEAParser */
	osThreadDef(NMEAParser, StartNMEAParser, osPriorityNormal, 0, 128);
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <main+0xec>)
 8000652:	1d3c      	adds	r4, r7, #4
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	6023      	str	r3, [r4, #0]
	NMEAParserHandle = osThreadCreate(osThread(NMEAParser), NULL);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 ff52 	bl	800350c <osThreadCreate>
 8000668:	4602      	mov	r2, r0
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <main+0xf0>)
 800066c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800066e:	f002 ff46 	bl	80034fe <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000672:	e7fe      	b.n	8000672 <main+0xca>
 8000674:	080045b4 	.word	0x080045b4
 8000678:	200010b0 	.word	0x200010b0
 800067c:	080045e8 	.word	0x080045e8
 8000680:	080045f8 	.word	0x080045f8
 8000684:	08004610 	.word	0x08004610
 8000688:	20001024 	.word	0x20001024
 800068c:	08004634 	.word	0x08004634
 8000690:	200011f4 	.word	0x200011f4
 8000694:	08004654 	.word	0x08004654
 8000698:	20001020 	.word	0x20001020

0800069c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b090      	sub	sp, #64	; 0x40
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 ff08 	bl	80044c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80006d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fb01 	bl	8001ce8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x54>
		Error_Handler();
 80006ec:	f000 fc54 	bl	8000f98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fd6d 	bl	80021e8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x7c>
		Error_Handler();
 8000714:	f000 fc40 	bl	8000f98 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3740      	adds	r7, #64	; 0x40
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART1_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800072c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000730:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000758:	f002 f94e 	bl	80029f8 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000762:	f000 fc19 	bl	8000f98 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200010b0 	.word	0x200010b0
 8000770:	40013800 	.word	0x40013800

08000774 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_DMA_Init+0x48>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <MX_DMA_Init+0x48>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_DMA_Init+0x48>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	200e      	movs	r0, #14
 8000798:	f000 fea5 	bl	80014e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800079c:	200e      	movs	r0, #14
 800079e:	f000 febe 	bl	800151e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2105      	movs	r1, #5
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 fe9d 	bl	80014e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007ac:	200f      	movs	r0, #15
 80007ae:	f000 feb6 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_GPIO_Init+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <MX_GPIO_Init+0x90>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_GPIO_Init+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_GPIO_Init+0x90>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0310 	and.w	r3, r3, #16
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_GPIO_Init+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MX_GPIO_Init+0x90>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_GPIO_Init+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0x94>)
 8000824:	f001 fa48 	bl	8001cb8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0x94>)
 8000842:	f001 f8df 	bl	8001a04 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000

08000858 <Parser>:

/* USER CODE BEGIN 4 */
void Parser(unsigned char data) {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	static unsigned char ByteCount = 0xff;
	static unsigned int MsgType;
	static char *MsgTxt = (char*) &MsgType;
	static unsigned char ComaPoint = 0xff;
	static unsigned char CharPoint = 0;
	if (data == '$') {
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b24      	cmp	r3, #36	; 0x24
 8000866:	d109      	bne.n	800087c <Parser+0x24>
		ByteCount = 0;
 8000868:	4ba1      	ldr	r3, [pc, #644]	; (8000af0 <Parser+0x298>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
		ComaPoint = 0xff;
 800086e:	4ba1      	ldr	r3, [pc, #644]	; (8000af4 <Parser+0x29c>)
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	701a      	strb	r2, [r3, #0]
		MsgTxt = (char*) &MsgType;
 8000874:	4ba0      	ldr	r3, [pc, #640]	; (8000af8 <Parser+0x2a0>)
 8000876:	4aa1      	ldr	r2, [pc, #644]	; (8000afc <Parser+0x2a4>)
 8000878:	601a      	str	r2, [r3, #0]
		return;
 800087a:	e1bc      	b.n	8000bf6 <Parser+0x39e>
	} //ждем начала стрки
	if (ByteCount == 0xff)
 800087c:	4b9c      	ldr	r3, [pc, #624]	; (8000af0 <Parser+0x298>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2bff      	cmp	r3, #255	; 0xff
 8000882:	f000 81b1 	beq.w	8000be8 <Parser+0x390>
		return;                                                               //
	ByteCount++;
 8000886:	4b9a      	ldr	r3, [pc, #616]	; (8000af0 <Parser+0x298>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b98      	ldr	r3, [pc, #608]	; (8000af0 <Parser+0x298>)
 8000890:	701a      	strb	r2, [r3, #0]
	if (ByteCount <= 1)
 8000892:	4b97      	ldr	r3, [pc, #604]	; (8000af0 <Parser+0x298>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	f240 81a8 	bls.w	8000bec <Parser+0x394>
		return;                                                         //
	if (ByteCount < 6 && ByteCount > 1)            //берем 4 символа заголовка
 800089c:	4b94      	ldr	r3, [pc, #592]	; (8000af0 <Parser+0x298>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d80d      	bhi.n	80008c0 <Parser+0x68>
 80008a4:	4b92      	ldr	r3, [pc, #584]	; (8000af0 <Parser+0x298>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d909      	bls.n	80008c0 <Parser+0x68>
			{
		*MsgTxt = data; //и делаем из него число
 80008ac:	4b92      	ldr	r3, [pc, #584]	; (8000af8 <Parser+0x2a0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	701a      	strb	r2, [r3, #0]
		MsgTxt++;
 80008b4:	4b90      	ldr	r3, [pc, #576]	; (8000af8 <Parser+0x2a0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a8f      	ldr	r2, [pc, #572]	; (8000af8 <Parser+0x2a0>)
 80008bc:	6013      	str	r3, [r2, #0]
		return;
 80008be:	e19a      	b.n	8000bf6 <Parser+0x39e>
	}
//
	switch (MsgType) {
 80008c0:	4b8e      	ldr	r3, [pc, #568]	; (8000afc <Parser+0x2a4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a8e      	ldr	r2, [pc, #568]	; (8000b00 <Parser+0x2a8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d020      	beq.n	800090c <Parser+0xb4>
 80008ca:	4a8d      	ldr	r2, [pc, #564]	; (8000b00 <Parser+0x2a8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d809      	bhi.n	80008e4 <Parser+0x8c>
 80008d0:	4a8c      	ldr	r2, [pc, #560]	; (8000b04 <Parser+0x2ac>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d051      	beq.n	800097a <Parser+0x122>
 80008d6:	4a8c      	ldr	r2, [pc, #560]	; (8000b08 <Parser+0x2b0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d017      	beq.n	800090c <Parser+0xb4>
 80008dc:	4a8b      	ldr	r2, [pc, #556]	; (8000b0c <Parser+0x2b4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d04b      	beq.n	800097a <Parser+0x122>
 80008e2:	e179      	b.n	8000bd8 <Parser+0x380>
 80008e4:	4a8a      	ldr	r2, [pc, #552]	; (8000b10 <Parser+0x2b8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d07e      	beq.n	80009e8 <Parser+0x190>
 80008ea:	4a89      	ldr	r2, [pc, #548]	; (8000b10 <Parser+0x2b8>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d804      	bhi.n	80008fa <Parser+0xa2>
 80008f0:	4a88      	ldr	r2, [pc, #544]	; (8000b14 <Parser+0x2bc>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	f000 80ac 	beq.w	8000a50 <Parser+0x1f8>
 80008f8:	e16e      	b.n	8000bd8 <Parser+0x380>
 80008fa:	4a87      	ldr	r2, [pc, #540]	; (8000b18 <Parser+0x2c0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	f000 8134 	beq.w	8000b6a <Parser+0x312>
 8000902:	4a86      	ldr	r2, [pc, #536]	; (8000b1c <Parser+0x2c4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	f000 80d7 	beq.w	8000ab8 <Parser+0x260>
 800090a:	e165      	b.n	8000bd8 <Parser+0x380>
	case 0x434D5250:                             //GPRMC
	case 0x434D524E:                             //GNRMC
		if (data == ',') {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b2c      	cmp	r3, #44	; 0x2c
 8000910:	d111      	bne.n	8000936 <Parser+0xde>
			ComaPoint++;
 8000912:	4b78      	ldr	r3, [pc, #480]	; (8000af4 <Parser+0x29c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b76      	ldr	r3, [pc, #472]	; (8000af4 <Parser+0x29c>)
 800091c:	701a      	strb	r2, [r3, #0]
			CharPoint = 0;
 800091e:	4b80      	ldr	r3, [pc, #512]	; (8000b20 <Parser+0x2c8>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
			RMC[ComaPoint][0] = 0;
 8000924:	4b73      	ldr	r3, [pc, #460]	; (8000af4 <Parser+0x29c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b7e      	ldr	r3, [pc, #504]	; (8000b24 <Parser+0x2cc>)
 800092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			return;
 8000934:	e15f      	b.n	8000bf6 <Parser+0x39e>
		}
		if (data == '*') {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b2a      	cmp	r3, #42	; 0x2a
 800093a:	d103      	bne.n	8000944 <Parser+0xec>
			MsgType = 0;
 800093c:	4b6f      	ldr	r3, [pc, #444]	; (8000afc <Parser+0x2a4>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
			return;
 8000942:	e158      	b.n	8000bf6 <Parser+0x39e>
		}
		RMC[ComaPoint][CharPoint++] = data;
 8000944:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <Parser+0x29c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b76      	ldr	r3, [pc, #472]	; (8000b24 <Parser+0x2cc>)
 800094c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000950:	4b73      	ldr	r3, [pc, #460]	; (8000b20 <Parser+0x2c8>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	1c59      	adds	r1, r3, #1
 8000956:	b2c8      	uxtb	r0, r1
 8000958:	4971      	ldr	r1, [pc, #452]	; (8000b20 <Parser+0x2c8>)
 800095a:	7008      	strb	r0, [r1, #0]
 800095c:	4413      	add	r3, r2
 800095e:	79fa      	ldrb	r2, [r7, #7]
 8000960:	701a      	strb	r2, [r3, #0]
		RMC[ComaPoint][CharPoint] = 0;
 8000962:	4b64      	ldr	r3, [pc, #400]	; (8000af4 <Parser+0x29c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	4b6e      	ldr	r3, [pc, #440]	; (8000b24 <Parser+0x2cc>)
 800096a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096e:	4a6c      	ldr	r2, [pc, #432]	; (8000b20 <Parser+0x2c8>)
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	4413      	add	r3, r2
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
		return;
 8000978:	e13d      	b.n	8000bf6 <Parser+0x39e>
	case 0x41474750:                             //PGGA
	case 0x4147474e:                             //NGGA
		if (data == ',') {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b2c      	cmp	r3, #44	; 0x2c
 800097e:	d111      	bne.n	80009a4 <Parser+0x14c>
			ComaPoint++;
 8000980:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <Parser+0x29c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b5a      	ldr	r3, [pc, #360]	; (8000af4 <Parser+0x29c>)
 800098a:	701a      	strb	r2, [r3, #0]
			CharPoint = 0;
 800098c:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <Parser+0x2c8>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
			GGA[ComaPoint][0] = 0;
 8000992:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <Parser+0x29c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4b63      	ldr	r3, [pc, #396]	; (8000b28 <Parser+0x2d0>)
 800099a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
			return;
 80009a2:	e128      	b.n	8000bf6 <Parser+0x39e>
		}
		if (data == '*') {
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b2a      	cmp	r3, #42	; 0x2a
 80009a8:	d103      	bne.n	80009b2 <Parser+0x15a>
			MsgType = 0;
 80009aa:	4b54      	ldr	r3, [pc, #336]	; (8000afc <Parser+0x2a4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
			return;
 80009b0:	e121      	b.n	8000bf6 <Parser+0x39e>
		}
		GGA[ComaPoint][CharPoint++] = data;
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <Parser+0x29c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <Parser+0x2d0>)
 80009ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009be:	4b58      	ldr	r3, [pc, #352]	; (8000b20 <Parser+0x2c8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	1c59      	adds	r1, r3, #1
 80009c4:	b2c8      	uxtb	r0, r1
 80009c6:	4956      	ldr	r1, [pc, #344]	; (8000b20 <Parser+0x2c8>)
 80009c8:	7008      	strb	r0, [r1, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	701a      	strb	r2, [r3, #0]
		GGA[ComaPoint][CharPoint] = 0;
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <Parser+0x29c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <Parser+0x2d0>)
 80009d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009dc:	4a50      	ldr	r2, [pc, #320]	; (8000b20 <Parser+0x2c8>)
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
		return;
 80009e6:	e106      	b.n	8000bf6 <Parser+0x39e>
	case 0x47545650:             //PVTG
		if (data == ',') {
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b2c      	cmp	r3, #44	; 0x2c
 80009ec:	d111      	bne.n	8000a12 <Parser+0x1ba>
			ComaPoint++;
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <Parser+0x29c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <Parser+0x29c>)
 80009f8:	701a      	strb	r2, [r3, #0]
			CharPoint = 0;
 80009fa:	4b49      	ldr	r3, [pc, #292]	; (8000b20 <Parser+0x2c8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
			VTG[ComaPoint][0] = 0;
 8000a00:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <Parser+0x29c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <Parser+0x2d4>)
 8000a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
			return;
 8000a10:	e0f1      	b.n	8000bf6 <Parser+0x39e>
		}
		if (data == '*') {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b2a      	cmp	r3, #42	; 0x2a
 8000a16:	f000 80eb 	beq.w	8000bf0 <Parser+0x398>
			return;
		}
		VTG[ComaPoint][CharPoint++] = data;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <Parser+0x29c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <Parser+0x2d4>)
 8000a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <Parser+0x2c8>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	1c59      	adds	r1, r3, #1
 8000a2c:	b2c8      	uxtb	r0, r1
 8000a2e:	493c      	ldr	r1, [pc, #240]	; (8000b20 <Parser+0x2c8>)
 8000a30:	7008      	strb	r0, [r1, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	701a      	strb	r2, [r3, #0]
		VTG[ComaPoint][CharPoint] = 0;
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <Parser+0x29c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <Parser+0x2d4>)
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	4a36      	ldr	r2, [pc, #216]	; (8000b20 <Parser+0x2c8>)
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
		return;
 8000a4e:	e0d2      	b.n	8000bf6 <Parser+0x39e>
	case 0x4754564e:             //NVTG
		if (data == ',') {
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b2c      	cmp	r3, #44	; 0x2c
 8000a54:	d111      	bne.n	8000a7a <Parser+0x222>
			ComaPoint++;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <Parser+0x29c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <Parser+0x29c>)
 8000a60:	701a      	strb	r2, [r3, #0]
			CharPoint = 0;
 8000a62:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <Parser+0x2c8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
			VTG[ComaPoint][0] = 0;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <Parser+0x29c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <Parser+0x2d4>)
 8000a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			return;
 8000a78:	e0bd      	b.n	8000bf6 <Parser+0x39e>
		}
		if (data == '*') {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000a7e:	f000 80b9 	beq.w	8000bf4 <Parser+0x39c>
			return;
		}
		VTG[ComaPoint][CharPoint++] = data;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <Parser+0x29c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <Parser+0x2d4>)
 8000a8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <Parser+0x2c8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	1c59      	adds	r1, r3, #1
 8000a94:	b2c8      	uxtb	r0, r1
 8000a96:	4922      	ldr	r1, [pc, #136]	; (8000b20 <Parser+0x2c8>)
 8000a98:	7008      	strb	r0, [r1, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	701a      	strb	r2, [r3, #0]
		VTG[ComaPoint][CharPoint] = 0;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <Parser+0x29c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <Parser+0x2d4>)
 8000aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aac:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <Parser+0x2c8>)
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		return;
 8000ab6:	e09e      	b.n	8000bf6 <Parser+0x39e>
	case 0x56534750:             //PGSV
		if (data == ',') {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b2c      	cmp	r3, #44	; 0x2c
 8000abc:	d111      	bne.n	8000ae2 <Parser+0x28a>
			ComaPoint++;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <Parser+0x29c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <Parser+0x29c>)
 8000ac8:	701a      	strb	r2, [r3, #0]
			CharPoint = 0;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <Parser+0x2c8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
			GSV[ComaPoint][0] = 0;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <Parser+0x29c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <Parser+0x2d8>)
 8000ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
			return;
 8000ae0:	e089      	b.n	8000bf6 <Parser+0x39e>
		}
		if (data == '*') {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ae6:	d125      	bne.n	8000b34 <Parser+0x2dc>
//			GPS_COUNT = AsciiToInt(ViewSat);
			MsgType = 0;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <Parser+0x2a4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
			return;
 8000aee:	e082      	b.n	8000bf6 <Parser+0x39e>
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000001 	.word	0x20000001
 8000af8:	20000004 	.word	0x20000004
 8000afc:	200002d4 	.word	0x200002d4
 8000b00:	434d5250 	.word	0x434d5250
 8000b04:	41474750 	.word	0x41474750
 8000b08:	434d524e 	.word	0x434d524e
 8000b0c:	4147474e 	.word	0x4147474e
 8000b10:	47545650 	.word	0x47545650
 8000b14:	4754564e 	.word	0x4754564e
 8000b18:	5653474c 	.word	0x5653474c
 8000b1c:	56534750 	.word	0x56534750
 8000b20:	200002d8 	.word	0x200002d8
 8000b24:	080048a0 	.word	0x080048a0
 8000b28:	080048d0 	.word	0x080048d0
 8000b2c:	08004964 	.word	0x08004964
 8000b30:	08004910 	.word	0x08004910
		}
		GSV[ComaPoint][CharPoint++] = data;
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <Parser+0x3a8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <Parser+0x3ac>)
 8000b3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <Parser+0x3b0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	1c59      	adds	r1, r3, #1
 8000b46:	b2c8      	uxtb	r0, r1
 8000b48:	492f      	ldr	r1, [pc, #188]	; (8000c08 <Parser+0x3b0>)
 8000b4a:	7008      	strb	r0, [r1, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	701a      	strb	r2, [r3, #0]
		GSV[ComaPoint][CharPoint] = 0;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <Parser+0x3a8>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <Parser+0x3ac>)
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	; (8000c08 <Parser+0x3b0>)
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
		return;
 8000b68:	e045      	b.n	8000bf6 <Parser+0x39e>
	case 0x5653474c:             //LGSV
		if (data == ',') {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b2c      	cmp	r3, #44	; 0x2c
 8000b6e:	d111      	bne.n	8000b94 <Parser+0x33c>
			ComaPoint++;
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <Parser+0x3a8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <Parser+0x3a8>)
 8000b7a:	701a      	strb	r2, [r3, #0]
			CharPoint = 0;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <Parser+0x3b0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
			GSV[ComaPoint][0] = 0;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <Parser+0x3a8>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <Parser+0x3ac>)
 8000b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
			return;
 8000b92:	e030      	b.n	8000bf6 <Parser+0x39e>
		}
		if (data == '*') {
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b2a      	cmp	r3, #42	; 0x2a
 8000b98:	d103      	bne.n	8000ba2 <Parser+0x34a>
//			GLONAS_COUNT = AsciiToInt(ViewSat);
			MsgType = 0;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <Parser+0x3b4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
			return;
 8000ba0:	e029      	b.n	8000bf6 <Parser+0x39e>
		}
		GSV[ComaPoint][CharPoint++] = data;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <Parser+0x3a8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <Parser+0x3ac>)
 8000baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <Parser+0x3b0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	1c59      	adds	r1, r3, #1
 8000bb4:	b2c8      	uxtb	r0, r1
 8000bb6:	4914      	ldr	r1, [pc, #80]	; (8000c08 <Parser+0x3b0>)
 8000bb8:	7008      	strb	r0, [r1, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	701a      	strb	r2, [r3, #0]
		GSV[ComaPoint][CharPoint] = 0;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <Parser+0x3a8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <Parser+0x3ac>)
 8000bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <Parser+0x3b0>)
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
		return;
 8000bd6:	e00e      	b.n	8000bf6 <Parser+0x39e>
	default:
		ByteCount = 0xff;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <Parser+0x3b8>)
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	701a      	strb	r2, [r3, #0]
		break;
 8000bde:	bf00      	nop
	}
	ByteCount = 0xff;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <Parser+0x3b8>)
 8000be2:	22ff      	movs	r2, #255	; 0xff
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e006      	b.n	8000bf6 <Parser+0x39e>
		return;                                                               //
 8000be8:	bf00      	nop
 8000bea:	e004      	b.n	8000bf6 <Parser+0x39e>
		return;                                                         //
 8000bec:	bf00      	nop
 8000bee:	e002      	b.n	8000bf6 <Parser+0x39e>
			return;
 8000bf0:	bf00      	nop
 8000bf2:	e000      	b.n	8000bf6 <Parser+0x39e>
			return;
 8000bf4:	bf00      	nop
}
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000001 	.word	0x20000001
 8000c04:	08004910 	.word	0x08004910
 8000c08:	200002d8 	.word	0x200002d8
 8000c0c:	200002d4 	.word	0x200002d4
 8000c10:	20000000 	.word	0x20000000

08000c14 <StartLCDPrint>:
 * @brief  Function implementing the LCDPrint thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDPrint */
void StartLCDPrint(void const *argument) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//		GPIOC->ODR ^= GPIO_ODR_ODR9;
//		HAL_UART_Receive_DMA(&huart1, buffer, UART_DMA_BUFFER_SIZE);
		test++;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <StartLCDPrint+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <StartLCDPrint+0x40>)
 8000c24:	6013      	str	r3, [r2, #0]
		display_clear();
 8000c26:	f7ff fc55 	bl	80004d4 <display_clear>

		char text[] = "";
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	733b      	strb	r3, [r7, #12]
		itoa(test, text, 10);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <StartLCDPrint+0x40>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f107 010c 	add.w	r1, r7, #12
 8000c36:	220a      	movs	r2, #10
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fc3f 	bl	80044bc <itoa>

		printstring_at(Time, 1, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2101      	movs	r1, #1
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <StartLCDPrint+0x44>)
 8000c44:	f7ff fc90 	bl	8000568 <printstring_at>
		osDelay(259);
 8000c48:	f240 1003 	movw	r0, #259	; 0x103
 8000c4c:	f002 fc85 	bl	800355a <osDelay>
	for (;;) {
 8000c50:	e7e4      	b.n	8000c1c <StartLCDPrint+0x8>
 8000c52:	bf00      	nop
 8000c54:	20000234 	.word	0x20000234
 8000c58:	20000238 	.word	0x20000238

08000c5c <StartUART_DMAParser>:
 * @brief Function implementing the UART_DMAParser thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUART_DMAParser */
void StartUART_DMAParser(void const *argument) {
 8000c5c:	b5b0      	push	{r4, r5, r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUART_DMAParser */

	size_t dma_head = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
	size_t dma_tail = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
	size_t cur_msg_sz = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
	size_t cur_msg = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
	uint8_t found = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	72fb      	strb	r3, [r7, #11]
	uint8_t start = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Receive_DMA(&huart1, buffer, UART_DMA_BUFFER_SIZE);
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	49a8      	ldr	r1, [pc, #672]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000c80:	48a8      	ldr	r0, [pc, #672]	; (8000f24 <StartUART_DMAParser+0x2c8>)
 8000c82:	f001 ff99 	bl	8002bb8 <HAL_UART_Receive_DMA>

	for (;;) {
		GPIOC->ODR ^= GPIO_ODR_ODR9;
 8000c86:	4ba8      	ldr	r3, [pc, #672]	; (8000f28 <StartUART_DMAParser+0x2cc>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	4aa7      	ldr	r2, [pc, #668]	; (8000f28 <StartUART_DMAParser+0x2cc>)
 8000c8c:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8000c90:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c92:	b672      	cpsid	i
		do {
			__disable_irq();
			dma_tail = UART_DMA_BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR;
 8000c94:	4ba3      	ldr	r3, [pc, #652]	; (8000f24 <StartUART_DMAParser+0x2c8>)
 8000c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000ca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ca2:	b662      	cpsie	i
			__enable_irq();

			if (dma_tail != dma_head) {
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f000 8129 	beq.w	8000f00 <StartUART_DMAParser+0x2a4>
				if (dma_head < dma_tail) {
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d261      	bcs.n	8000d7a <StartUART_DMAParser+0x11e>
					for (register size_t i = dma_head; i < dma_tail; i++) {
 8000cb6:	69fc      	ldr	r4, [r7, #28]
 8000cb8:	e05b      	b.n	8000d72 <StartUART_DMAParser+0x116>
						if (start == 0 && buffer[i] == '$') {
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <StartUART_DMAParser+0x70>
 8000cc0:	4b97      	ldr	r3, [pc, #604]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000cc2:	5d1b      	ldrb	r3, [r3, r4]
 8000cc4:	2b24      	cmp	r3, #36	; 0x24
 8000cc6:	d101      	bne.n	8000ccc <StartUART_DMAParser+0x70>
							start = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	74fb      	strb	r3, [r7, #19]
						}

						found = (start == 1 && buffer[i] == '\r') ? 1 :
 8000ccc:	7cfb      	ldrb	r3, [r7, #19]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d103      	bne.n	8000cda <StartUART_DMAParser+0x7e>
 8000cd2:	4b93      	ldr	r3, [pc, #588]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000cd4:	5d1b      	ldrb	r3, [r3, r4]
 8000cd6:	2b0d      	cmp	r3, #13
 8000cd8:	d00a      	beq.n	8000cf0 <StartUART_DMAParser+0x94>
 8000cda:	7cfb      	ldrb	r3, [r7, #19]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <StartUART_DMAParser+0x90>
								(start == 1 && buffer[i] == '\n') ? 2 : 0;
 8000ce0:	4b8f      	ldr	r3, [pc, #572]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000ce2:	5d1b      	ldrb	r3, [r3, r4]
 8000ce4:	2b0a      	cmp	r3, #10
 8000ce6:	d101      	bne.n	8000cec <StartUART_DMAParser+0x90>
						found = (start == 1 && buffer[i] == '\r') ? 1 :
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <StartUART_DMAParser+0x96>
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <StartUART_DMAParser+0x96>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	72fb      	strb	r3, [r7, #11]

						if (start == 1) {
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <StartUART_DMAParser+0xac>
							buffer_msg[cur_msg_sz++] = buffer[i];
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	61ba      	str	r2, [r7, #24]
 8000d00:	4a87      	ldr	r2, [pc, #540]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000d02:	5d11      	ldrb	r1, [r2, r4]
 8000d04:	4a89      	ldr	r2, [pc, #548]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000d06:	54d1      	strb	r1, [r2, r3]
						}

						if (found == 2) {
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d130      	bne.n	8000d70 <StartUART_DMAParser+0x114>
							if (strncmp(buffer_msg, "$GPRMC", 6) == 0) {
 8000d0e:	2206      	movs	r2, #6
 8000d10:	4987      	ldr	r1, [pc, #540]	; (8000f30 <StartUART_DMAParser+0x2d4>)
 8000d12:	4886      	ldr	r0, [pc, #536]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000d14:	f003 fbdc 	bl	80044d0 <strncmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <StartUART_DMAParser+0xc6>
								cur_msg = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
							}
							memset(msg_list[cur_msg], 0, PARSER_MESSAGE_SIZE);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	01db      	lsls	r3, r3, #7
 8000d26:	4a83      	ldr	r2, [pc, #524]	; (8000f34 <StartUART_DMAParser+0x2d8>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fbc6 	bl	80044c0 <memset>
							strncpy(msg_list[cur_msg], buffer_msg,
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4a7e      	ldr	r2, [pc, #504]	; (8000f34 <StartUART_DMAParser+0x2d8>)
 8000d3a:	189d      	adds	r5, r3, r2
 8000d3c:	487b      	ldr	r0, [pc, #492]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000d3e:	f7ff fa67 	bl	8000210 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	4979      	ldr	r1, [pc, #484]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f003 fbd3 	bl	80044f4 <strncpy>
									strlen(buffer_msg));
							memset(buffer_msg, 0, PARSER_MESSAGE_SIZE);
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	2100      	movs	r1, #0
 8000d52:	4876      	ldr	r0, [pc, #472]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000d54:	f003 fbb4 	bl	80044c0 <memset>

							cur_msg =
									cur_msg == PARSER_MESSAGE_LIST_SIZE - 1 ?
											0 : cur_msg + 1;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d002      	beq.n	8000d64 <StartUART_DMAParser+0x108>
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	e000      	b.n	8000d66 <StartUART_DMAParser+0x10a>
 8000d64:	2300      	movs	r3, #0
							cur_msg =
 8000d66:	617b      	str	r3, [r7, #20]

							cur_msg_sz = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
							start = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	74fb      	strb	r3, [r7, #19]
					for (register size_t i = dma_head; i < dma_tail; i++) {
 8000d70:	3401      	adds	r4, #1
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	429c      	cmp	r4, r3
 8000d76:	d3a0      	bcc.n	8000cba <StartUART_DMAParser+0x5e>
 8000d78:	e0c0      	b.n	8000efc <StartUART_DMAParser+0x2a0>
						}
					}
				} else {
					for (register size_t i = dma_head; i < UART_DMA_BUFFER_SIZE;
 8000d7a:	69fc      	ldr	r4, [r7, #28]
 8000d7c:	e05b      	b.n	8000e36 <StartUART_DMAParser+0x1da>
							i++) {
						if (start == 0 && buffer[i] == '$') {
 8000d7e:	7cfb      	ldrb	r3, [r7, #19]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d105      	bne.n	8000d90 <StartUART_DMAParser+0x134>
 8000d84:	4b66      	ldr	r3, [pc, #408]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000d86:	5d1b      	ldrb	r3, [r3, r4]
 8000d88:	2b24      	cmp	r3, #36	; 0x24
 8000d8a:	d101      	bne.n	8000d90 <StartUART_DMAParser+0x134>
							start = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	74fb      	strb	r3, [r7, #19]
						}

						found = (start == 1 && buffer[i] == '\r') ? 1 :
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d103      	bne.n	8000d9e <StartUART_DMAParser+0x142>
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000d98:	5d1b      	ldrb	r3, [r3, r4]
 8000d9a:	2b0d      	cmp	r3, #13
 8000d9c:	d00a      	beq.n	8000db4 <StartUART_DMAParser+0x158>
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d105      	bne.n	8000db0 <StartUART_DMAParser+0x154>
								(start == 1 && buffer[i] == '\n') ? 2 : 0;
 8000da4:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000da6:	5d1b      	ldrb	r3, [r3, r4]
 8000da8:	2b0a      	cmp	r3, #10
 8000daa:	d101      	bne.n	8000db0 <StartUART_DMAParser+0x154>
						found = (start == 1 && buffer[i] == '\r') ? 1 :
 8000dac:	2302      	movs	r3, #2
 8000dae:	e002      	b.n	8000db6 <StartUART_DMAParser+0x15a>
 8000db0:	2300      	movs	r3, #0
 8000db2:	e000      	b.n	8000db6 <StartUART_DMAParser+0x15a>
 8000db4:	2301      	movs	r3, #1
 8000db6:	72fb      	strb	r3, [r7, #11]

						if (start == 1) {
 8000db8:	7cfb      	ldrb	r3, [r7, #19]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d106      	bne.n	8000dcc <StartUART_DMAParser+0x170>
							buffer_msg[cur_msg_sz++] = buffer[i];
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	61ba      	str	r2, [r7, #24]
 8000dc4:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000dc6:	5d11      	ldrb	r1, [r2, r4]
 8000dc8:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000dca:	54d1      	strb	r1, [r2, r3]
						}

						if (found == 2) {
 8000dcc:	7afb      	ldrb	r3, [r7, #11]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <StartUART_DMAParser+0x1d8>
							if (strncmp(buffer_msg, "$GPRMC", 6) == 0) {
 8000dd2:	2206      	movs	r2, #6
 8000dd4:	4956      	ldr	r1, [pc, #344]	; (8000f30 <StartUART_DMAParser+0x2d4>)
 8000dd6:	4855      	ldr	r0, [pc, #340]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000dd8:	f003 fb7a 	bl	80044d0 <strncmp>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <StartUART_DMAParser+0x18a>
								cur_msg = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
							}
							memset(msg_list[cur_msg], 0, PARSER_MESSAGE_SIZE);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	01db      	lsls	r3, r3, #7
 8000dea:	4a52      	ldr	r2, [pc, #328]	; (8000f34 <StartUART_DMAParser+0x2d8>)
 8000dec:	4413      	add	r3, r2
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fb64 	bl	80044c0 <memset>
							strncpy(msg_list[cur_msg], buffer_msg,
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	01db      	lsls	r3, r3, #7
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <StartUART_DMAParser+0x2d8>)
 8000dfe:	189d      	adds	r5, r3, r2
 8000e00:	484a      	ldr	r0, [pc, #296]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000e02:	f7ff fa05 	bl	8000210 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4948      	ldr	r1, [pc, #288]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f003 fb71 	bl	80044f4 <strncpy>
									strlen(buffer_msg));
							memset(buffer_msg, 0, PARSER_MESSAGE_SIZE);
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	2100      	movs	r1, #0
 8000e16:	4845      	ldr	r0, [pc, #276]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000e18:	f003 fb52 	bl	80044c0 <memset>

							cur_msg =
									cur_msg == PARSER_MESSAGE_LIST_SIZE - 1 ?
											0 : cur_msg + 1;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d002      	beq.n	8000e28 <StartUART_DMAParser+0x1cc>
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	e000      	b.n	8000e2a <StartUART_DMAParser+0x1ce>
 8000e28:	2300      	movs	r3, #0
							cur_msg =
 8000e2a:	617b      	str	r3, [r7, #20]

							cur_msg_sz = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
							start = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	74fb      	strb	r3, [r7, #19]
							i++) {
 8000e34:	3401      	adds	r4, #1
					for (register size_t i = dma_head; i < UART_DMA_BUFFER_SIZE;
 8000e36:	2c7f      	cmp	r4, #127	; 0x7f
 8000e38:	d9a1      	bls.n	8000d7e <StartUART_DMAParser+0x122>
						}
					}
					for (register size_t i = 0; i < dma_tail; i++) {
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	e05b      	b.n	8000ef6 <StartUART_DMAParser+0x29a>
						if (start == 0 && buffer[i] == '$') {
 8000e3e:	7cfb      	ldrb	r3, [r7, #19]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <StartUART_DMAParser+0x1f4>
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000e46:	5d1b      	ldrb	r3, [r3, r4]
 8000e48:	2b24      	cmp	r3, #36	; 0x24
 8000e4a:	d101      	bne.n	8000e50 <StartUART_DMAParser+0x1f4>
							start = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	74fb      	strb	r3, [r7, #19]
						}

						found = (start == 1 && buffer[i] == '\r') ? 1 :
 8000e50:	7cfb      	ldrb	r3, [r7, #19]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d103      	bne.n	8000e5e <StartUART_DMAParser+0x202>
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000e58:	5d1b      	ldrb	r3, [r3, r4]
 8000e5a:	2b0d      	cmp	r3, #13
 8000e5c:	d00a      	beq.n	8000e74 <StartUART_DMAParser+0x218>
 8000e5e:	7cfb      	ldrb	r3, [r7, #19]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d105      	bne.n	8000e70 <StartUART_DMAParser+0x214>
								(start == 1 && buffer[i] == '\n') ? 2 : 0;
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000e66:	5d1b      	ldrb	r3, [r3, r4]
 8000e68:	2b0a      	cmp	r3, #10
 8000e6a:	d101      	bne.n	8000e70 <StartUART_DMAParser+0x214>
						found = (start == 1 && buffer[i] == '\r') ? 1 :
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <StartUART_DMAParser+0x21a>
 8000e70:	2300      	movs	r3, #0
 8000e72:	e000      	b.n	8000e76 <StartUART_DMAParser+0x21a>
 8000e74:	2301      	movs	r3, #1
 8000e76:	72fb      	strb	r3, [r7, #11]

						if (start == 1) {
 8000e78:	7cfb      	ldrb	r3, [r7, #19]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <StartUART_DMAParser+0x230>
							buffer_msg[cur_msg_sz++] = buffer[i];
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	61ba      	str	r2, [r7, #24]
 8000e84:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <StartUART_DMAParser+0x2c4>)
 8000e86:	5d11      	ldrb	r1, [r2, r4]
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000e8a:	54d1      	strb	r1, [r2, r3]
						}

						if (found == 2) {
 8000e8c:	7afb      	ldrb	r3, [r7, #11]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <StartUART_DMAParser+0x298>
							if (strncmp(buffer_msg, "$GPRMC", 6) == 0) {
 8000e92:	2206      	movs	r2, #6
 8000e94:	4926      	ldr	r1, [pc, #152]	; (8000f30 <StartUART_DMAParser+0x2d4>)
 8000e96:	4825      	ldr	r0, [pc, #148]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000e98:	f003 fb1a 	bl	80044d0 <strncmp>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <StartUART_DMAParser+0x24a>
								cur_msg = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
							}
							memset(msg_list[cur_msg], 0, PARSER_MESSAGE_SIZE);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	01db      	lsls	r3, r3, #7
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <StartUART_DMAParser+0x2d8>)
 8000eac:	4413      	add	r3, r2
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fb04 	bl	80044c0 <memset>
							strncpy(msg_list[cur_msg], buffer_msg,
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	01db      	lsls	r3, r3, #7
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <StartUART_DMAParser+0x2d8>)
 8000ebe:	189d      	adds	r5, r3, r2
 8000ec0:	481a      	ldr	r0, [pc, #104]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000ec2:	f7ff f9a5 	bl	8000210 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4918      	ldr	r1, [pc, #96]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000ecc:	4628      	mov	r0, r5
 8000ece:	f003 fb11 	bl	80044f4 <strncpy>
									strlen(buffer_msg));
							memset(buffer_msg, 0, PARSER_MESSAGE_SIZE);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <StartUART_DMAParser+0x2d0>)
 8000ed8:	f003 faf2 	bl	80044c0 <memset>

							cur_msg =
									cur_msg == PARSER_MESSAGE_LIST_SIZE - 1 ?
											0 : cur_msg + 1;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d002      	beq.n	8000ee8 <StartUART_DMAParser+0x28c>
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	e000      	b.n	8000eea <StartUART_DMAParser+0x28e>
 8000ee8:	2300      	movs	r3, #0
							cur_msg =
 8000eea:	617b      	str	r3, [r7, #20]

							cur_msg_sz = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
							start = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	74fb      	strb	r3, [r7, #19]
					for (register size_t i = 0; i < dma_tail; i++) {
 8000ef4:	3401      	adds	r4, #1
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	d3a0      	bcc.n	8000e3e <StartUART_DMAParser+0x1e2>
						}
					}
				}
				dma_head = dma_tail;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	61fb      	str	r3, [r7, #28]
			}
		} while (dma_head
				!= (UART_DMA_BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR));
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <StartUART_DMAParser+0x2c8>)
 8000f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	f47f aebf 	bne.w	8000c92 <StartUART_DMAParser+0x36>
		osDelay(500); // this should be the minimum time difference between each frame
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f002 fb1f 	bl	800355a <osDelay>
		GPIOC->ODR ^= GPIO_ODR_ODR9;
 8000f1c:	e6b3      	b.n	8000c86 <StartUART_DMAParser+0x2a>
 8000f1e:	bf00      	nop
 8000f20:	20000034 	.word	0x20000034
 8000f24:	200010b0 	.word	0x200010b0
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	08004668 	.word	0x08004668
 8000f34:	20000134 	.word	0x20000134

08000f38 <StartNMEAParser>:
 * @brief Function implementing the NMEAParser thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNMEAParser */
void StartNMEAParser(void const *argument) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartNMEAParser */
	/* Infinite loop */
	for (;;) {
		for (uint8_t i = 0; i < strlen(msg_list[0]); i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e008      	b.n	8000f58 <StartNMEAParser+0x20>
			Parser(msg_list[0][i]);
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <StartNMEAParser+0x38>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc83 	bl	8000858 <Parser>
		for (uint8_t i = 0; i < strlen(msg_list[0]); i++) {
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	3301      	adds	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	7bfc      	ldrb	r4, [r7, #15]
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <StartNMEAParser+0x38>)
 8000f5c:	f7ff f958 	bl	8000210 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	429c      	cmp	r4, r3
 8000f64:	d3ef      	bcc.n	8000f46 <StartNMEAParser+0xe>
		}
		osDelay(150);
 8000f66:	2096      	movs	r0, #150	; 0x96
 8000f68:	f002 faf7 	bl	800355a <osDelay>
		for (uint8_t i = 0; i < strlen(msg_list[0]); i++) {
 8000f6c:	e7e8      	b.n	8000f40 <StartNMEAParser+0x8>
 8000f6e:	bf00      	nop
 8000f70:	20000134 	.word	0x20000134

08000f74 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f86:	f000 f9bb 	bl	8001300 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40001400 	.word	0x40001400

08000f98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f9e:	e7fe      	b.n	8000f9e <Error_Handler+0x6>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_MspInit+0x68>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_MspInit+0x68>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_MspInit+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_MspInit+0x68>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <HAL_MspInit+0x68>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_MspInit+0x68>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	f06f 0001 	mvn.w	r0, #1
 8000fde:	f000 fa82 	bl	80014e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_MspInit+0x6c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_MspInit+0x6c>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_UART_MspInit+0x13c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 8088 	bne.w	8001142 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_UART_MspInit+0x140>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_UART_MspInit+0x140>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <HAL_UART_MspInit+0x140>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <HAL_UART_MspInit+0x140>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a40      	ldr	r2, [pc, #256]	; (8001150 <HAL_UART_MspInit+0x140>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <HAL_UART_MspInit+0x140>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4837      	ldr	r0, [pc, #220]	; (8001154 <HAL_UART_MspInit+0x144>)
 8001078:	f000 fcc4 	bl	8001a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4619      	mov	r1, r3
 8001090:	4830      	ldr	r0, [pc, #192]	; (8001154 <HAL_UART_MspInit+0x144>)
 8001092:	f000 fcb7 	bl	8001a04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <HAL_UART_MspInit+0x148>)
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <HAL_UART_MspInit+0x14c>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109c:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <HAL_UART_MspInit+0x148>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010bc:	2220      	movs	r2, #32
 80010be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80010c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010c8:	4823      	ldr	r0, [pc, #140]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010ca:	f000 fa37 	bl	800153c <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80010d4:	f7ff ff60 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_UART_MspInit+0x148>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <HAL_UART_MspInit+0x150>)
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_UART_MspInit+0x154>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_UART_MspInit+0x150>)
 80010ec:	2210      	movs	r2, #16
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_UART_MspInit+0x150>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_UART_MspInit+0x150>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_UART_MspInit+0x150>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_UART_MspInit+0x150>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0x150>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_UART_MspInit+0x150>)
 8001110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001114:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <HAL_UART_MspInit+0x150>)
 8001118:	f000 fa10 	bl	800153c <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001122:	f7ff ff39 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_UART_MspInit+0x150>)
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_UART_MspInit+0x150>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2025      	movs	r0, #37	; 0x25
 8001138:	f000 f9d5 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113c:	2025      	movs	r0, #37	; 0x25
 800113e:	f000 f9ee 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800
 8001158:	2000106c 	.word	0x2000106c
 800115c:	40020058 	.word	0x40020058
 8001160:	20001028 	.word	0x20001028
 8001164:	40020044 	.word	0x40020044

08001168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	2037      	movs	r0, #55	; 0x37
 800117e:	f000 f9b2 	bl	80014e6 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001182:	2037      	movs	r0, #55	; 0x37
 8001184:	f000 f9cb 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_InitTick+0x9c>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_InitTick+0x9c>)
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	61d3      	str	r3, [r2, #28]
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_InitTick+0x9c>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a0:	f107 0210 	add.w	r2, r7, #16
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f96a 	bl	8002484 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b0:	f001 f940 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80011b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_InitTick+0xa0>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3b01      	subs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_InitTick+0xa4>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_InitTick+0xa8>)
 80011c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_InitTick+0xa4>)
 80011cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_InitTick+0xa4>)
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_InitTick+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_InitTick+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <HAL_InitTick+0xa4>)
 80011e6:	f001 f997 	bl	8002518 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d104      	bne.n	80011fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80011f0:	4806      	ldr	r0, [pc, #24]	; (800120c <HAL_InitTick+0xa4>)
 80011f2:	f001 f9e9 	bl	80025c8 <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	431bde83 	.word	0x431bde83
 800120c:	200011f8 	.word	0x200011f8
 8001210:	40001400 	.word	0x40001400

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DMA1_Channel4_IRQHandler+0x10>)
 8001246:	f000 faa9 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20001028 	.word	0x20001028

08001254 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <DMA1_Channel5_IRQHandler+0x10>)
 800125a:	f000 fa9f 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000106c 	.word	0x2000106c

08001268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART1_IRQHandler+0x10>)
 800126e:	f001 fd23 	bl	8002cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200010b0 	.word	0x200010b0

0800127c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <TIM7_IRQHandler+0x10>)
 8001282:	f001 f9fb 	bl	800267c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200011f8 	.word	0x200011f8

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800129c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800129e:	e003      	b.n	80012a8 <LoopCopyDataInit>

080012a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012a6:	3104      	adds	r1, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012a8:	480a      	ldr	r0, [pc, #40]	; (80012d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012b0:	d3f6      	bcc.n	80012a0 <CopyDataInit>
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012b4:	e002      	b.n	80012bc <LoopFillZerobss>

080012b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012b8:	f842 3b04 	str.w	r3, [r2], #4

080012bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012c0:	d3f9      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c2:	f7ff ffe5 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f003 f8bd 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7ff f96d 	bl	80005a8 <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r3, =_sidata
 80012d0:	080049d4 	.word	0x080049d4
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012d8:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 80012dc:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 80012e0:	20001244 	.word	0x20001244

080012e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_IRQHandler>

080012e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f8f0 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff39 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fe53 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_IncTick+0x20>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000010 	.word	0x20000010
 8001320:	20001240 	.word	0x20001240

08001324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20001240 	.word	0x20001240

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff fff0 	bl	8001324 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_Delay+0x40>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffe0 	bl	8001324 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000010 	.word	0x20000010

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4906      	ldr	r1, [pc, #24]	; (8001414 <__NVIC_EnableIRQ+0x34>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff4f 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff64 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ffb2 	bl	800146c <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff81 	bl	8001418 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff57 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e043      	b.n	80015da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_DMA_Init+0xa8>)
 800155a:	4413      	add	r3, r2
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_DMA_Init+0xac>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_DMA_Init+0xb0>)
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800158a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	bffdfff8 	.word	0xbffdfff8
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_DMA_Start_IT+0x20>
 800160c:	2302      	movs	r3, #2
 800160e:	e04a      	b.n	80016a6 <HAL_DMA_Start_IT+0xb6>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800161e:	2b01      	cmp	r3, #1
 8001620:	d13a      	bne.n	8001698 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f9ae 	bl	80019a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 020e 	orr.w	r2, r2, #14
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e00f      	b.n	8001686 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0204 	bic.w	r2, r2, #4
 8001674:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 020a 	orr.w	r2, r2, #10
 8001684:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e005      	b.n	80016a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e051      	b.n	8001776 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <HAL_DMA_Abort_IT+0xd0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d029      	beq.n	8001750 <HAL_DMA_Abort_IT+0xa0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a20      	ldr	r2, [pc, #128]	; (8001784 <HAL_DMA_Abort_IT+0xd4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d022      	beq.n	800174c <HAL_DMA_Abort_IT+0x9c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_DMA_Abort_IT+0xd8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d01a      	beq.n	8001746 <HAL_DMA_Abort_IT+0x96>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_DMA_Abort_IT+0xdc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d012      	beq.n	8001740 <HAL_DMA_Abort_IT+0x90>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_DMA_Abort_IT+0xe0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00a      	beq.n	800173a <HAL_DMA_Abort_IT+0x8a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_DMA_Abort_IT+0xe4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d102      	bne.n	8001734 <HAL_DMA_Abort_IT+0x84>
 800172e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001732:	e00e      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001738:	e00b      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 800173a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173e:	e008      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	e005      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	e002      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 800174c:	2310      	movs	r3, #16
 800174e:	e000      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001750:	2301      	movs	r3, #1
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <HAL_DMA_Abort_IT+0xe8>)
 8001754:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    } 
  }
  return status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020008 	.word	0x40020008
 8001784:	4002001c 	.word	0x4002001c
 8001788:	40020030 	.word	0x40020030
 800178c:	40020044 	.word	0x40020044
 8001790:	40020058 	.word	0x40020058
 8001794:	4002006c 	.word	0x4002006c
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d04f      	beq.n	8001864 <HAL_DMA_IRQHandler+0xc8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d04a      	beq.n	8001864 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0204 	bic.w	r2, r2, #4
 80017ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a66      	ldr	r2, [pc, #408]	; (800198c <HAL_DMA_IRQHandler+0x1f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d029      	beq.n	800184a <HAL_DMA_IRQHandler+0xae>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_DMA_IRQHandler+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <HAL_DMA_IRQHandler+0xaa>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a63      	ldr	r2, [pc, #396]	; (8001994 <HAL_DMA_IRQHandler+0x1f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01a      	beq.n	8001840 <HAL_DMA_IRQHandler+0xa4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a62      	ldr	r2, [pc, #392]	; (8001998 <HAL_DMA_IRQHandler+0x1fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d012      	beq.n	800183a <HAL_DMA_IRQHandler+0x9e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a60      	ldr	r2, [pc, #384]	; (800199c <HAL_DMA_IRQHandler+0x200>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x98>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5f      	ldr	r2, [pc, #380]	; (80019a0 <HAL_DMA_IRQHandler+0x204>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d102      	bne.n	800182e <HAL_DMA_IRQHandler+0x92>
 8001828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182c:	e00e      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800182e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001832:	e00b      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001838:	e008      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800183a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800183e:	e005      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001844:	e002      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001846:	2340      	movs	r3, #64	; 0x40
 8001848:	e000      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800184a:	2304      	movs	r3, #4
 800184c:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_DMA_IRQHandler+0x208>)
 800184e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8094 	beq.w	8001982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001862:	e08e      	b.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	2202      	movs	r2, #2
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d056      	beq.n	8001922 <HAL_DMA_IRQHandler+0x186>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d051      	beq.n	8001922 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 020a 	bic.w	r2, r2, #10
 800189a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <HAL_DMA_IRQHandler+0x1f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d029      	beq.n	8001902 <HAL_DMA_IRQHandler+0x166>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a37      	ldr	r2, [pc, #220]	; (8001990 <HAL_DMA_IRQHandler+0x1f4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <HAL_DMA_IRQHandler+0x162>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a35      	ldr	r2, [pc, #212]	; (8001994 <HAL_DMA_IRQHandler+0x1f8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x15c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <HAL_DMA_IRQHandler+0x1fc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x156>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <HAL_DMA_IRQHandler+0x200>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x150>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_DMA_IRQHandler+0x204>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x14a>
 80018e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018e4:	e00e      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	e00b      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	e008      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	e005      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	e002      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018fe:	2320      	movs	r3, #32
 8001900:	e000      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 8001902:	2302      	movs	r3, #2
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_DMA_IRQHandler+0x208>)
 8001906:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001920:	e02f      	b.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2208      	movs	r2, #8
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d028      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 020e 	bic.w	r2, r2, #14
 800194a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    }
  }
  return;
 8001982:	bf00      	nop
 8001984:	bf00      	nop
}
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020008 	.word	0x40020008
 8001990:	4002001c 	.word	0x4002001c
 8001994:	40020030 	.word	0x40020030
 8001998:	40020044 	.word	0x40020044
 800199c:	40020058 	.word	0x40020058
 80019a0:	4002006c 	.word	0x4002006c
 80019a4:	40020000 	.word	0x40020000

080019a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d108      	bne.n	80019e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019e6:	e007      	b.n	80019f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b08b      	sub	sp, #44	; 0x2c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e127      	b.n	8001c68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8116 	bne.w	8001c62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b12      	cmp	r3, #18
 8001a3c:	d034      	beq.n	8001aa8 <HAL_GPIO_Init+0xa4>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d80d      	bhi.n	8001a5e <HAL_GPIO_Init+0x5a>
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d02b      	beq.n	8001a9e <HAL_GPIO_Init+0x9a>
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d804      	bhi.n	8001a54 <HAL_GPIO_Init+0x50>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d031      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d01c      	beq.n	8001a8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e048      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d043      	beq.n	8001ae0 <HAL_GPIO_Init+0xdc>
 8001a58:	2b11      	cmp	r3, #17
 8001a5a:	d01b      	beq.n	8001a94 <HAL_GPIO_Init+0x90>
          break;
 8001a5c:	e043      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a5e:	4a89      	ldr	r2, [pc, #548]	; (8001c84 <HAL_GPIO_Init+0x280>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d026      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
 8001a64:	4a87      	ldr	r2, [pc, #540]	; (8001c84 <HAL_GPIO_Init+0x280>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d806      	bhi.n	8001a78 <HAL_GPIO_Init+0x74>
 8001a6a:	4a87      	ldr	r2, [pc, #540]	; (8001c88 <HAL_GPIO_Init+0x284>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d020      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
 8001a70:	4a86      	ldr	r2, [pc, #536]	; (8001c8c <HAL_GPIO_Init+0x288>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01d      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
          break;
 8001a76:	e036      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a78:	4a85      	ldr	r2, [pc, #532]	; (8001c90 <HAL_GPIO_Init+0x28c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
 8001a7e:	4a85      	ldr	r2, [pc, #532]	; (8001c94 <HAL_GPIO_Init+0x290>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d016      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
 8001a84:	4a84      	ldr	r2, [pc, #528]	; (8001c98 <HAL_GPIO_Init+0x294>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0xae>
          break;
 8001a8a:	e02c      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e028      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e023      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e01e      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	330c      	adds	r3, #12
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e019      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aba:	2304      	movs	r3, #4
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e012      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	611a      	str	r2, [r3, #16]
          break;
 8001ad2:	e008      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	615a      	str	r2, [r3, #20]
          break;
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d801      	bhi.n	8001af0 <HAL_GPIO_Init+0xec>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	e001      	b.n	8001af4 <HAL_GPIO_Init+0xf0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2bff      	cmp	r3, #255	; 0xff
 8001afa:	d802      	bhi.n	8001b02 <HAL_GPIO_Init+0xfe>
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x104>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	3b08      	subs	r3, #8
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	210f      	movs	r1, #15
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	401a      	ands	r2, r3
 8001b1a:	6a39      	ldr	r1, [r7, #32]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8096 	beq.w	8001c62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_GPIO_Init+0x298>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_GPIO_Init+0x298>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x298>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b4e:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x29c>)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x19e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x19a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_GPIO_Init+0x2a8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x196>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x192>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x1a0>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x1a0>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x1a0>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x1a0>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb4:	493a      	ldr	r1, [pc, #232]	; (8001ca0 <HAL_GPIO_Init+0x29c>)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4938      	ldr	r1, [pc, #224]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4933      	ldr	r1, [pc, #204]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	492e      	ldr	r1, [pc, #184]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
 8001c02:	e006      	b.n	8001c12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4929      	ldr	r1, [pc, #164]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
 8001c2a:	e006      	b.n	8001c3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	491f      	ldr	r1, [pc, #124]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	491a      	ldr	r1, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4915      	ldr	r1, [pc, #84]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f aed0 	bne.w	8001a18 <HAL_GPIO_Init+0x14>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	372c      	adds	r7, #44	; 0x2c
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	10210000 	.word	0x10210000
 8001c88:	10110000 	.word	0x10110000
 8001c8c:	10120000 	.word	0x10120000
 8001c90:	10310000 	.word	0x10310000
 8001c94:	10320000 	.word	0x10320000
 8001c98:	10220000 	.word	0x10220000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40010800 	.word	0x40010800
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40011400 	.word	0x40011400
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e26c      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8087 	beq.w	8001e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d08:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d00c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d14:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d112      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5e>
 8001d20:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2c:	d10b      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d06c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x12c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d168      	bne.n	8001e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e246      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x76>
 8001d50:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a7f      	ldr	r2, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e02e      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7a      	ldr	r2, [pc, #488]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e01d      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0xbc>
 8001d8a:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a71      	ldr	r2, [pc, #452]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a6a      	ldr	r2, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff faae 	bl	8001324 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff faaa 	bl	8001324 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1fa      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe4>
 8001dea:	e014      	b.n	8001e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fa9a 	bl	8001324 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fa96 	bl	8001324 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1e6      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x10c>
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e22:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d11c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x18c>
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d116      	bne.n	8001e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e1ba      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4939      	ldr	r1, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	e03a      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fa4f 	bl	8001324 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fa4b 	bl	8001324 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e19b      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4927      	ldr	r1, [pc, #156]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa2e 	bl	8001324 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fa2a 	bl	8001324 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e17a      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03a      	beq.n	8001f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d019      	beq.n	8001f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f04:	f7ff fa0e 	bl	8001324 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fa0a 	bl	8001324 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e15a      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 fad6 	bl	80024dc <RCC_Delay>
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff f9f4 	bl	8001324 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff f9f0 	bl	8001324 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e140      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	42420000 	.word	0x42420000
 8001f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b9e      	ldr	r3, [pc, #632]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e9      	bne.n	8001f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a6 	beq.w	80020c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b97      	ldr	r3, [pc, #604]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b94      	ldr	r3, [pc, #592]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a93      	ldr	r2, [pc, #588]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b8b      	ldr	r3, [pc, #556]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a8a      	ldr	r2, [pc, #552]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f9b1 	bl	8001324 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff f9ad 	bl	8001324 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0fd      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x312>
 8001fec:	4b7b      	ldr	r3, [pc, #492]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a7a      	ldr	r2, [pc, #488]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	e02d      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x334>
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	4b73      	ldr	r3, [pc, #460]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a72      	ldr	r2, [pc, #456]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	e01c      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x356>
 8002024:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a6c      	ldr	r2, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e00b      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	4b64      	ldr	r3, [pc, #400]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a63      	ldr	r2, [pc, #396]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff f961 	bl	8001324 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff f95d 	bl	8001324 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0ab      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCC_OscConfig+0x37e>
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff f94b 	bl	8001324 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff f947 	bl	8001324 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e095      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b48      	ldr	r3, [pc, #288]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a47      	ldr	r2, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8081 	beq.w	80021d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d061      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d146      	bne.n	8002172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_OscConfig+0x4fc>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff f91b 	bl	8001324 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff f917 	bl	8001324 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e067      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d108      	bne.n	800212c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f023 020f 	bic.w	r2, r3, #15
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	492d      	ldr	r1, [pc, #180]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a19      	ldr	r1, [r3, #32]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	430b      	orrs	r3, r1
 800213e:	4927      	ldr	r1, [pc, #156]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_OscConfig+0x4fc>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff f8eb 	bl	8001324 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff f8e7 	bl	8001324 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e037      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x46a>
 8002170:	e02f      	b.n	80021d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_RCC_OscConfig+0x4fc>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff f8d4 	bl	8001324 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff f8d0 	bl	8001324 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e020      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x498>
 800219e:	e018      	b.n	80021d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e013      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420060 	.word	0x42420060

080021e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0a0      	b.n	800233e <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002214:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 800221a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222c:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a45      	ldr	r2, [pc, #276]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4940      	ldr	r1, [pc, #256]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d040      	beq.n	80022d8 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d115      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e067      	b.n	800233e <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e05b      	b.n	800233e <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4929      	ldr	r1, [pc, #164]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff f83c 	bl	8001324 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff f838 	bl	8001324 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e03b      	b.n	800233e <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4915      	ldr	r1, [pc, #84]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490d      	ldr	r1, [pc, #52]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f81f 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x160>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x164>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	fa21 f303 	lsr.w	r3, r1, r3
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_RCC_ClockConfig+0x168>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_RCC_ClockConfig+0x16c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe ff16 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	0800498c 	.word	0x0800498c
 8002350:	20000008 	.word	0x20000008
 8002354:	2000000c 	.word	0x2000000c

08002358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b490      	push	{r4, r7}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002360:	f107 0414 	add.w	r4, r7, #20
 8002364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	1d3c      	adds	r4, r7, #4
 800236e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002378:	2300      	movs	r3, #0
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
 800237c:	2300      	movs	r3, #0
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_GetSysClockFreq+0xbc>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	d002      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x46>
 8002398:	2b08      	cmp	r3, #8
 800239a:	d003      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x4c>
 800239c:	e02c      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023a2:	e02c      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b0:	4413      	add	r3, r2
 80023b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d012      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ce:	4413      	add	r3, r2
 80023d0:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023da:	fb02 f203 	mul.w	r2, r2, r3
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002400:	4618      	mov	r0, r3
 8002402:	3738      	adds	r7, #56	; 0x38
 8002404:	46bd      	mov	sp, r7
 8002406:	bc90      	pop	{r4, r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	08004670 	.word	0x08004670
 8002410:	08004680 	.word	0x08004680
 8002414:	40021000 	.word	0x40021000
 8002418:	007a1200 	.word	0x007a1200
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_RCC_GetHCLKFreq+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000008 	.word	0x20000008

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff2 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 800243c:	4601      	mov	r1, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	0800499c 	.word	0x0800499c

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffde 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	0800499c 	.word	0x0800499c

08002484 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	220f      	movs	r2, #15
 8002492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_RCC_GetClockConfig+0x54>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_GetClockConfig+0x54>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_RCC_GetClockConfig+0x54>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCC_GetClockConfig+0x54>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	08db      	lsrs	r3, r3, #3
 80024be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
#endif
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <RCC_Delay+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <RCC_Delay+0x38>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0a5b      	lsrs	r3, r3, #9
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f8:	bf00      	nop
  }
  while (Delay --);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	60fa      	str	r2, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <RCC_Delay+0x1c>
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e041      	b.n	80025ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f839 	bl	80025b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 f9bc 	bl	80028d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e03f      	b.n	8002660 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_TIM_Base_Start_IT+0xa4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260a:	d00e      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x62>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_TIM_Base_Start_IT+0xa8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_TIM_Base_Start_IT+0xac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x62>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_TIM_Base_Start_IT+0xb0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d010      	beq.n	800265e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	e007      	b.n	800265e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40014000 	.word	0x40014000

0800267c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b02      	cmp	r3, #2
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0202 	mvn.w	r2, #2
 80026a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8ed 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8e0 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f8ef 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d122      	bne.n	800272c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0204 	mvn.w	r2, #4
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8c3 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8b6 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8c5 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b08      	cmp	r3, #8
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0208 	mvn.w	r2, #8
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f899 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f88c 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f89b 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0210 	mvn.w	r2, #16
 80027a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2208      	movs	r2, #8
 80027aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f86f 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f862 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f871 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0201 	mvn.w	r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fbba 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8dd 	bl	80029e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f835 	bl	80028c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b20      	cmp	r3, #32
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0220 	mvn.w	r2, #32
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f8a8 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a35      	ldr	r2, [pc, #212]	; (80029bc <TIM_Base_SetConfig+0xe8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00b      	beq.n	8002904 <TIM_Base_SetConfig+0x30>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d007      	beq.n	8002904 <TIM_Base_SetConfig+0x30>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a32      	ldr	r2, [pc, #200]	; (80029c0 <TIM_Base_SetConfig+0xec>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_Base_SetConfig+0x30>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a31      	ldr	r2, [pc, #196]	; (80029c4 <TIM_Base_SetConfig+0xf0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <TIM_Base_SetConfig+0xe8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d017      	beq.n	800294e <TIM_Base_SetConfig+0x7a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d013      	beq.n	800294e <TIM_Base_SetConfig+0x7a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <TIM_Base_SetConfig+0xec>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00f      	beq.n	800294e <TIM_Base_SetConfig+0x7a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <TIM_Base_SetConfig+0xf0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00b      	beq.n	800294e <TIM_Base_SetConfig+0x7a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <TIM_Base_SetConfig+0xf4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <TIM_Base_SetConfig+0x7a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a22      	ldr	r2, [pc, #136]	; (80029cc <TIM_Base_SetConfig+0xf8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_Base_SetConfig+0x7a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <TIM_Base_SetConfig+0xfc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d108      	bne.n	8002960 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <TIM_Base_SetConfig+0xe8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00b      	beq.n	80029a4 <TIM_Base_SetConfig+0xd0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <TIM_Base_SetConfig+0xf4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0xd0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <TIM_Base_SetConfig+0xf8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0xd0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <TIM_Base_SetConfig+0xfc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800
 80029c8:	40014000 	.word	0x40014000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e03f      	b.n	8002a8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe faf6 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fc63 	bl	8003308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b08a      	sub	sp, #40	; 0x28
 8002a96:	af02      	add	r7, sp, #8
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d17c      	bne.n	8002bac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_UART_Transmit+0x2c>
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e075      	b.n	8002bae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_UART_Transmit+0x3e>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e06e      	b.n	8002bae <HAL_UART_Transmit+0x11c>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2221      	movs	r2, #33	; 0x21
 8002ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe fc1d 	bl	8001324 <HAL_GetTick>
 8002aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	88fa      	ldrh	r2, [r7, #6]
 8002af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d108      	bne.n	8002b14 <HAL_UART_Transmit+0x82>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e003      	b.n	8002b1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b24:	e02a      	b.n	8002b7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fa71 	bl	8003018 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e036      	b.n	8002bae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10b      	bne.n	8002b5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e007      	b.n	8002b6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1cf      	bne.n	8002b26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fa41 	bl	8003018 <UART_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e006      	b.n	8002bae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d166      	bne.n	8002ca0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_UART_Receive_DMA+0x26>
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e05f      	b.n	8002ca2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Receive_DMA+0x38>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e058      	b.n	8002ca2 <HAL_UART_Receive_DMA+0xea>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2222      	movs	r2, #34	; 0x22
 8002c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <HAL_UART_Receive_DMA+0xf4>)
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <HAL_UART_Receive_DMA+0xf8>)
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_UART_Receive_DMA+0xfc>)
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	2200      	movs	r2, #0
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3304      	adds	r3, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	f7fe fcd1 	bl	80015f0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	08002f01 	.word	0x08002f01
 8002cb0:	08002f69 	.word	0x08002f69
 8002cb4:	08002f85 	.word	0x08002f85

08002cb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_UART_IRQHandler+0x52>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa7f 	bl	8003206 <UART_Receive_IT>
      return;
 8002d08:	e0d1      	b.n	8002eae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80b0 	beq.w	8002e72 <HAL_UART_IRQHandler+0x1ba>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_UART_IRQHandler+0x70>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80a5 	beq.w	8002e72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_UART_IRQHandler+0x90>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_UART_IRQHandler+0xb0>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	f043 0202 	orr.w	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_UART_IRQHandler+0xd0>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00f      	beq.n	8002db2 <HAL_UART_IRQHandler+0xfa>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d104      	bne.n	8002da6 <HAL_UART_IRQHandler+0xee>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	f043 0208 	orr.w	r2, r3, #8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d078      	beq.n	8002eac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x11c>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa19 	bl	8003206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_UART_IRQHandler+0x144>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d031      	beq.n	8002e60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f96a 	bl	80030d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_UART_IRQHandler+0x1fc>)
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fc3b 	bl	80016b0 <HAL_DMA_Abort_IT>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4e:	e00e      	b.n	8002e6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f84c 	bl	8002eee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e56:	e00a      	b.n	8002e6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f848 	bl	8002eee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5e:	e006      	b.n	8002e6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f844 	bl	8002eee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e6c:	e01e      	b.n	8002eac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6e:	bf00      	nop
    return;
 8002e70:	e01c      	b.n	8002eac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_UART_IRQHandler+0x1d6>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f956 	bl	8003138 <UART_Transmit_IT>
    return;
 8002e8c:	e00f      	b.n	8002eae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_UART_IRQHandler+0x1f6>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f997 	bl	80031d6 <UART_EndTransmit_IT>
    return;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <HAL_UART_IRQHandler+0x1f6>
    return;
 8002eac:	bf00      	nop
  }
}
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08003111 	.word	0x08003111

08002eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11e      	bne.n	8002f5a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f30:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f50:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff ffb5 	bl	8002eca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff ffb0 	bl	8002edc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b21      	cmp	r3, #33	; 0x21
 8002fb6:	d108      	bne.n	8002fca <UART_DMAError+0x46>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002fc4:	68b8      	ldr	r0, [r7, #8]
 8002fc6:	f000 f871 	bl	80030ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b22      	cmp	r3, #34	; 0x22
 8002fea:	d108      	bne.n	8002ffe <UART_DMAError+0x7a>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	f000 f86c 	bl	80030d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	f7ff ff6f 	bl	8002eee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003028:	e02c      	b.n	8003084 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003030:	d028      	beq.n	8003084 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0x30>
 8003038:	f7fe f974 	bl	8001324 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	429a      	cmp	r2, r3
 8003046:	d21d      	bcs.n	8003084 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003056:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e00f      	b.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d0c3      	beq.n	800302a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80030c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff fedf 	bl	8002eee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b21      	cmp	r3, #33	; 0x21
 800314a:	d13e      	bne.n	80031ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d114      	bne.n	8003180 <UART_Transmit_IT+0x48>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d110      	bne.n	8003180 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003172:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	621a      	str	r2, [r3, #32]
 800317e:	e008      	b.n	8003192 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	1c59      	adds	r1, r3, #1
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6211      	str	r1, [r2, #32]
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4619      	mov	r1, r3
 80031a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fe5e 	bl	8002eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b22      	cmp	r3, #34	; 0x22
 8003218:	d170      	bne.n	80032fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d117      	bne.n	8003254 <UART_Receive_IT+0x4e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d113      	bne.n	8003254 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	b29a      	uxth	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	1c9a      	adds	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
 8003252:	e026      	b.n	80032a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d007      	beq.n	8003278 <UART_Receive_IT+0x72>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <UART_Receive_IT+0x80>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e008      	b.n	8003298 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4619      	mov	r1, r3
 80032b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d120      	bne.n	80032f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0220 	bic.w	r2, r2, #32
 80032c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fdeb 	bl	8002eca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e002      	b.n	80032fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4313      	orrs	r3, r2
 800333c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003348:	f023 030c 	bic.w	r3, r3, #12
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	430b      	orrs	r3, r1
 8003354:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <UART_SetConfig+0x1c0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d103      	bne.n	800337e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003376:	f7ff f871 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	e002      	b.n	8003384 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800337e:	f7ff f859 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003382:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338c:	d14c      	bne.n	8003428 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009a      	lsls	r2, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	4a49      	ldr	r2, [pc, #292]	; (80034cc <UART_SetConfig+0x1c4>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	0119      	lsls	r1, r3, #4
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009a      	lsls	r2, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <UART_SetConfig+0x1c4>)
 80033c6:	fba3 0302 	umull	r0, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2064      	movs	r0, #100	; 0x64
 80033ce:	fb00 f303 	mul.w	r3, r0, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	3332      	adds	r3, #50	; 0x32
 80033d8:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <UART_SetConfig+0x1c4>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033e6:	4419      	add	r1, r3
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fe:	4b33      	ldr	r3, [pc, #204]	; (80034cc <UART_SetConfig+0x1c4>)
 8003400:	fba3 0302 	umull	r0, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2064      	movs	r0, #100	; 0x64
 8003408:	fb00 f303 	mul.w	r3, r0, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3332      	adds	r3, #50	; 0x32
 8003412:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <UART_SetConfig+0x1c4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	440a      	add	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8003426:	e04a      	b.n	80034be <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009a      	lsls	r2, r3, #2
 8003432:	441a      	add	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4a23      	ldr	r2, [pc, #140]	; (80034cc <UART_SetConfig+0x1c4>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	0119      	lsls	r1, r3, #4
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	441a      	add	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	fbb2 f2f3 	udiv	r2, r2, r3
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <UART_SetConfig+0x1c4>)
 8003460:	fba3 0302 	umull	r0, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2064      	movs	r0, #100	; 0x64
 8003468:	fb00 f303 	mul.w	r3, r0, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a16      	ldr	r2, [pc, #88]	; (80034cc <UART_SetConfig+0x1c4>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347e:	4419      	add	r1, r3
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	fbb2 f2f3 	udiv	r2, r2, r3
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <UART_SetConfig+0x1c4>)
 8003498:	fba3 0302 	umull	r0, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2064      	movs	r0, #100	; 0x64
 80034a0:	fb00 f303 	mul.w	r3, r0, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <UART_SetConfig+0x1c4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	440a      	add	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40013800 	.word	0x40013800
 80034cc:	51eb851f 	.word	0x51eb851f

080034d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	2b84      	cmp	r3, #132	; 0x84
 80034e4:	d005      	beq.n	80034f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	3303      	adds	r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003502:	f000 fa59 	bl	80039b8 <vTaskStartScheduler>
  
  return osOK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}

0800350c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	b087      	sub	sp, #28
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685c      	ldr	r4, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003522:	b29e      	uxth	r6, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ffd0 	bl	80034d0 <makeFreeRtosPriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	9200      	str	r2, [sp, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	4632      	mov	r2, r6
 800353e:	4629      	mov	r1, r5
 8003540:	4620      	mov	r0, r4
 8003542:	f000 f8cd 	bl	80036e0 <xTaskCreate>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003550:	68fb      	ldr	r3, [r7, #12]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800355a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <osDelay+0x16>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	e000      	b.n	8003572 <osDelay+0x18>
 8003570:	2301      	movs	r3, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f9ec 	bl	8003950 <vTaskDelay>
  
  return osOK;
 8003578:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f103 0208 	add.w	r2, r3, #8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800359a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f103 0208 	add.w	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 0208 	add.w	r2, r3, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003634:	d103      	bne.n	800363e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e00c      	b.n	8003658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3308      	adds	r3, #8
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e002      	b.n	800364c <vListInsert+0x2e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d2f6      	bcs.n	8003646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6892      	ldr	r2, [r2, #8]
 80036a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6852      	ldr	r2, [r2, #4]
 80036ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d103      	bne.n	80036c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fe49 	bl	800438c <pvPortMalloc>
 80036fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003702:	2060      	movs	r0, #96	; 0x60
 8003704:	f000 fe42 	bl	800438c <pvPortMalloc>
 8003708:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
 8003716:	e005      	b.n	8003724 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003718:	6978      	ldr	r0, [r7, #20]
 800371a:	f000 fe7d 	bl	8004418 <vPortFree>
 800371e:	e001      	b.n	8003724 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d013      	beq.n	8003752 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	2300      	movs	r3, #0
 800372e:	9303      	str	r3, [sp, #12]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f80e 	bl	8003762 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003746:	69f8      	ldr	r0, [r7, #28]
 8003748:	f000 f894 	bl	8003874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800374c:	2301      	movs	r3, #1
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e002      	b.n	8003758 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003756:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003758:	69bb      	ldr	r3, [r7, #24]
	}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b088      	sub	sp, #32
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	461a      	mov	r2, r3
 800377a:	21a5      	movs	r1, #165	; 0xa5
 800377c:	f000 fea0 	bl	80044c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800378a:	3b01      	subs	r3, #1
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f023 0307 	bic.w	r3, r3, #7
 8003798:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e7fe      	b.n	80037b6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e012      	b.n	80037e4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	7819      	ldrb	r1, [r3, #0]
 80037c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	3334      	adds	r3, #52	; 0x34
 80037ce:	460a      	mov	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d9e9      	bls.n	80037be <prvInitialiseNewTask+0x5c>
 80037ea:	e000      	b.n	80037ee <prvInitialiseNewTask+0x8c>
		{
			break;
 80037ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d901      	bls.n	8003800 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037fc:	2306      	movs	r3, #6
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	2200      	movs	r2, #0
 8003810:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	3304      	adds	r3, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fed2 	bl	80035c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3318      	adds	r3, #24
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fecd 	bl	80035c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	f1c3 0207 	rsb	r2, r3, #7
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	2200      	movs	r2, #0
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2200      	movs	r2, #0
 8003846:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	69b8      	ldr	r0, [r7, #24]
 8003856:	f000 fbf1 	bl	800403c <pxPortInitialiseStack>
 800385a:	4602      	mov	r2, r0
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800387c:	f000 fccc 	bl	8004218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <prvAddNewTaskToReadyList+0xc0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <prvAddNewTaskToReadyList+0xc0>)
 8003888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <prvAddNewTaskToReadyList+0xc0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d110      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038a0:	f000 fac6 	bl	8003e30 <prvInitialiseTaskLists>
 80038a4:	e00d      	b.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <prvAddNewTaskToReadyList+0xc8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d802      	bhi.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038c2:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <prvAddNewTaskToReadyList+0xcc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <prvAddNewTaskToReadyList+0xcc>)
 80038ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038cc:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <prvAddNewTaskToReadyList+0xcc>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <prvAddNewTaskToReadyList+0xd0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <prvAddNewTaskToReadyList+0xd0>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <prvAddNewTaskToReadyList+0xd4>)
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7ff fe6b 	bl	80035d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003902:	f000 fcb7 	bl	8004274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <prvAddNewTaskToReadyList+0xc8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d207      	bcs.n	800392c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <prvAddNewTaskToReadyList+0xd8>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200003dc 	.word	0x200003dc
 8003938:	200002dc 	.word	0x200002dc
 800393c:	200003e8 	.word	0x200003e8
 8003940:	200003f8 	.word	0x200003f8
 8003944:	200003e4 	.word	0x200003e4
 8003948:	200002e0 	.word	0x200002e0
 800394c:	e000ed04 	.word	0xe000ed04

08003950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <vTaskDelay+0x60>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <vTaskDelay+0x2e>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	e7fe      	b.n	800397c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800397e:	f000 f863 	bl	8003a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003982:	2100      	movs	r1, #0
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 faf3 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800398a:	f000 f86b 	bl	8003a64 <xTaskResumeAll>
 800398e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <vTaskDelay+0x64>)
 8003998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000404 	.word	0x20000404
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <vTaskStartScheduler+0x78>)
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	491a      	ldr	r1, [pc, #104]	; (8003a34 <vTaskStartScheduler+0x7c>)
 80039cc:	481a      	ldr	r0, [pc, #104]	; (8003a38 <vTaskStartScheduler+0x80>)
 80039ce:	f7ff fe87 	bl	80036e0 <xTaskCreate>
 80039d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d117      	bne.n	8003a0a <vTaskStartScheduler+0x52>
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <vTaskStartScheduler+0x84>)
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <vTaskStartScheduler+0x88>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <vTaskStartScheduler+0x8c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003a00:	f7fc fc0e 	bl	8000220 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a04:	f000 fb98 	bl	8004138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a08:	e00d      	b.n	8003a26 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a10:	d109      	bne.n	8003a26 <vTaskStartScheduler+0x6e>
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	e7fe      	b.n	8003a24 <vTaskStartScheduler+0x6c>
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000400 	.word	0x20000400
 8003a34:	08004690 	.word	0x08004690
 8003a38:	08003e01 	.word	0x08003e01
 8003a3c:	200003fc 	.word	0x200003fc
 8003a40:	200003e8 	.word	0x200003e8
 8003a44:	200003e0 	.word	0x200003e0

08003a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <vTaskSuspendAll+0x18>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	4a03      	ldr	r2, [pc, #12]	; (8003a60 <vTaskSuspendAll+0x18>)
 8003a54:	6013      	str	r3, [r2, #0]
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000404 	.word	0x20000404

08003a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <xTaskResumeAll+0x114>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <xTaskResumeAll+0x2a>
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	e7fe      	b.n	8003a8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a8e:	f000 fbc3 	bl	8004218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <xTaskResumeAll+0x114>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	4a37      	ldr	r2, [pc, #220]	; (8003b78 <xTaskResumeAll+0x114>)
 8003a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <xTaskResumeAll+0x114>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d161      	bne.n	8003b68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003aa4:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <xTaskResumeAll+0x118>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d05d      	beq.n	8003b68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aac:	e02e      	b.n	8003b0c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003aae:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <xTaskResumeAll+0x11c>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3318      	adds	r3, #24
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fde7 	bl	800368e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fde2 	bl	800368e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	2201      	movs	r2, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <xTaskResumeAll+0x120>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <xTaskResumeAll+0x120>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <xTaskResumeAll+0x124>)
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7ff fd70 	bl	80035d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <xTaskResumeAll+0x128>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <xTaskResumeAll+0x12c>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <xTaskResumeAll+0x11c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1cc      	bne.n	8003aae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b1a:	f000 fa05 	bl	8003f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <xTaskResumeAll+0x130>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b2a:	f000 f837 	bl	8003b9c <xTaskIncrementTick>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <xTaskResumeAll+0x12c>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f1      	bne.n	8003b2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <xTaskResumeAll+0x130>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <xTaskResumeAll+0x12c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <xTaskResumeAll+0x134>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b68:	f000 fb84 	bl	8004274 <vPortExitCritical>

	return xAlreadyYielded;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000404 	.word	0x20000404
 8003b7c:	200003dc 	.word	0x200003dc
 8003b80:	2000039c 	.word	0x2000039c
 8003b84:	200003e4 	.word	0x200003e4
 8003b88:	200002e0 	.word	0x200002e0
 8003b8c:	200002dc 	.word	0x200002dc
 8003b90:	200003f0 	.word	0x200003f0
 8003b94:	200003ec 	.word	0x200003ec
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba6:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <xTaskIncrementTick+0x14c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 808c 	bne.w	8003cc8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bb0:	4b4e      	ldr	r3, [pc, #312]	; (8003cec <xTaskIncrementTick+0x150>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bb8:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <xTaskIncrementTick+0x150>)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11f      	bne.n	8003c04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bc4:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <xTaskIncrementTick+0x154>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <xTaskIncrementTick+0x46>
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	e7fe      	b.n	8003be0 <xTaskIncrementTick+0x44>
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <xTaskIncrementTick+0x154>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <xTaskIncrementTick+0x158>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a40      	ldr	r2, [pc, #256]	; (8003cf0 <xTaskIncrementTick+0x154>)
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4a40      	ldr	r2, [pc, #256]	; (8003cf4 <xTaskIncrementTick+0x158>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <xTaskIncrementTick+0x15c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	4a3e      	ldr	r2, [pc, #248]	; (8003cf8 <xTaskIncrementTick+0x15c>)
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	f000 f992 	bl	8003f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c04:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <xTaskIncrementTick+0x160>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d34d      	bcc.n	8003caa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0e:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <xTaskIncrementTick+0x154>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <xTaskIncrementTick+0x80>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <xTaskIncrementTick+0x82>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <xTaskIncrementTick+0x160>)
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c28:	601a      	str	r2, [r3, #0]
					break;
 8003c2a:	e03e      	b.n	8003caa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c2c:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <xTaskIncrementTick+0x154>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d203      	bcs.n	8003c4c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c44:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <xTaskIncrementTick+0x160>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6013      	str	r3, [r2, #0]
						break;
 8003c4a:	e02e      	b.n	8003caa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fd1c 	bl	800368e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3318      	adds	r3, #24
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fd13 	bl	800368e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <xTaskIncrementTick+0x164>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <xTaskIncrementTick+0x164>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <xTaskIncrementTick+0x168>)
 8003c88:	441a      	add	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7ff fca1 	bl	80035d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <xTaskIncrementTick+0x16c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3b4      	bcc.n	8003c0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	e7b1      	b.n	8003c0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <xTaskIncrementTick+0x16c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4914      	ldr	r1, [pc, #80]	; (8003d04 <xTaskIncrementTick+0x168>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d907      	bls.n	8003cd2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e004      	b.n	8003cd2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <xTaskIncrementTick+0x170>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <xTaskIncrementTick+0x170>)
 8003cd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <xTaskIncrementTick+0x174>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cde:	697b      	ldr	r3, [r7, #20]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000404 	.word	0x20000404
 8003cec:	200003e0 	.word	0x200003e0
 8003cf0:	20000394 	.word	0x20000394
 8003cf4:	20000398 	.word	0x20000398
 8003cf8:	200003f4 	.word	0x200003f4
 8003cfc:	200003fc 	.word	0x200003fc
 8003d00:	200003e4 	.word	0x200003e4
 8003d04:	200002e0 	.word	0x200002e0
 8003d08:	200002dc 	.word	0x200002dc
 8003d0c:	200003ec 	.word	0x200003ec
 8003d10:	200003f0 	.word	0x200003f0

08003d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <vTaskSwitchContext+0xd0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d22:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <vTaskSwitchContext+0xd4>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d28:	e057      	b.n	8003dda <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <vTaskSwitchContext+0xd4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003d30:	f7fc fa7c 	bl	800022c <getRunTimeCounterValue>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <vTaskSwitchContext+0xd8>)
 8003d38:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <vTaskSwitchContext+0xd8>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <vTaskSwitchContext+0xdc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d909      	bls.n	8003d5a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <vTaskSwitchContext+0xe0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <vTaskSwitchContext+0xd8>)
 8003d4e:	6810      	ldr	r0, [r2, #0]
 8003d50:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <vTaskSwitchContext+0xdc>)
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	1a82      	subs	r2, r0, r2
 8003d56:	440a      	add	r2, r1
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <vTaskSwitchContext+0xd8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <vTaskSwitchContext+0xdc>)
 8003d60:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <vTaskSwitchContext+0xe4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	f1c3 031f 	rsb	r3, r3, #31
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	4920      	ldr	r1, [pc, #128]	; (8003dfc <vTaskSwitchContext+0xe8>)
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <vTaskSwitchContext+0x8c>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	e7fe      	b.n	8003d9e <vTaskSwitchContext+0x8a>
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <vTaskSwitchContext+0xe8>)
 8003dac:	4413      	add	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d104      	bne.n	8003dd0 <vTaskSwitchContext+0xbc>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <vTaskSwitchContext+0xe0>)
 8003dd8:	6013      	str	r3, [r2, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000404 	.word	0x20000404
 8003de8:	200003f0 	.word	0x200003f0
 8003dec:	2000040c 	.word	0x2000040c
 8003df0:	20000408 	.word	0x20000408
 8003df4:	200002dc 	.word	0x200002dc
 8003df8:	200003e4 	.word	0x200003e4
 8003dfc:	200002e0 	.word	0x200002e0

08003e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e08:	f000 f852 	bl	8003eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <prvIdleTask+0x28>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d9f9      	bls.n	8003e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <prvIdleTask+0x2c>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e24:	e7f0      	b.n	8003e08 <prvIdleTask+0x8>
 8003e26:	bf00      	nop
 8003e28:	200002e0 	.word	0x200002e0
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	e00c      	b.n	8003e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <prvInitialiseTaskLists+0x60>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fb99 	bl	8003582 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3301      	adds	r3, #1
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d9ef      	bls.n	8003e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <prvInitialiseTaskLists+0x64>)
 8003e5e:	f7ff fb90 	bl	8003582 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e62:	480d      	ldr	r0, [pc, #52]	; (8003e98 <prvInitialiseTaskLists+0x68>)
 8003e64:	f7ff fb8d 	bl	8003582 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e68:	480c      	ldr	r0, [pc, #48]	; (8003e9c <prvInitialiseTaskLists+0x6c>)
 8003e6a:	f7ff fb8a 	bl	8003582 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e6e:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <prvInitialiseTaskLists+0x70>)
 8003e70:	f7ff fb87 	bl	8003582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e74:	480b      	ldr	r0, [pc, #44]	; (8003ea4 <prvInitialiseTaskLists+0x74>)
 8003e76:	f7ff fb84 	bl	8003582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <prvInitialiseTaskLists+0x78>)
 8003e7c:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <prvInitialiseTaskLists+0x64>)
 8003e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <prvInitialiseTaskLists+0x7c>)
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <prvInitialiseTaskLists+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200002e0 	.word	0x200002e0
 8003e94:	2000036c 	.word	0x2000036c
 8003e98:	20000380 	.word	0x20000380
 8003e9c:	2000039c 	.word	0x2000039c
 8003ea0:	200003b0 	.word	0x200003b0
 8003ea4:	200003c8 	.word	0x200003c8
 8003ea8:	20000394 	.word	0x20000394
 8003eac:	20000398 	.word	0x20000398

08003eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb6:	e019      	b.n	8003eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003eb8:	f000 f9ae 	bl	8004218 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <prvCheckTasksWaitingTermination+0x4c>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fbe0 	bl	800368e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <prvCheckTasksWaitingTermination+0x50>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <prvCheckTasksWaitingTermination+0x50>)
 8003ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <prvCheckTasksWaitingTermination+0x54>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <prvCheckTasksWaitingTermination+0x54>)
 8003ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ee2:	f000 f9c7 	bl	8004274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f80e 	bl	8003f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <prvCheckTasksWaitingTermination+0x54>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e1      	bne.n	8003eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	200003b0 	.word	0x200003b0
 8003f00:	200003dc 	.word	0x200003dc
 8003f04:	200003c4 	.word	0x200003c4

08003f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fa7f 	bl	8004418 <vPortFree>
			vPortFree( pxTCB );
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa7c 	bl	8004418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <prvResetNextTaskUnblockTime+0x40>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <prvResetNextTaskUnblockTime+0x14>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <prvResetNextTaskUnblockTime+0x16>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <prvResetNextTaskUnblockTime+0x44>)
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f4a:	e008      	b.n	8003f5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <prvResetNextTaskUnblockTime+0x40>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <prvResetNextTaskUnblockTime+0x44>)
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	20000394 	.word	0x20000394
 8003f6c:	200003fc 	.word	0x200003fc

08003f70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fb81 	bl	800368e <uxListRemove>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	2201      	movs	r2, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb0:	d10a      	bne.n	8003fc8 <prvAddCurrentTaskToDelayedList+0x58>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	481a      	ldr	r0, [pc, #104]	; (800402c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fc2:	f7ff fb09 	bl	80035d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fc6:	e026      	b.n	8004016 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d209      	bcs.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7ff fb16 	bl	800361e <vListInsert>
}
 8003ff2:	e010      	b.n	8004016 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7ff fb0c 	bl	800361e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d202      	bcs.n	8004016 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200003e0 	.word	0x200003e0
 8004024:	200002dc 	.word	0x200002dc
 8004028:	200003e4 	.word	0x200003e4
 800402c:	200003c8 	.word	0x200003c8
 8004030:	20000398 	.word	0x20000398
 8004034:	20000394 	.word	0x20000394
 8004038:	200003fc 	.word	0x200003fc

0800403c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b04      	subs	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <pxPortInitialiseStack+0x54>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b14      	subs	r3, #20
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b20      	subs	r3, #32
 8004082:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004084:	68fb      	ldr	r3, [r7, #12]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	08004095 	.word	0x08004095

08004094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <prvTaskExitError+0x4c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a6:	d009      	beq.n	80040bc <prvTaskExitError+0x28>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e7fe      	b.n	80040ba <prvTaskExitError+0x26>
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ce:	bf00      	nop
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0fc      	beq.n	80040d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	20000014 	.word	0x20000014
	...

080040f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	f04e 0e0d 	orr.w	lr, lr, #13
 800410e:	4770      	bx	lr

08004110 <pxCurrentTCBConst2>:
 8004110:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004118:	4806      	ldr	r0, [pc, #24]	; (8004134 <prvPortStartFirstTask+0x1c>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	b662      	cpsie	i
 8004124:	b661      	cpsie	f
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	df00      	svc	0
 8004130:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004132:	bf00      	nop
 8004134:	e000ed08 	.word	0xe000ed08

08004138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800413e:	4b31      	ldr	r3, [pc, #196]	; (8004204 <xPortStartScheduler+0xcc>)
 8004140:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <xPortStartScheduler+0xd0>)
 8004164:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <xPortStartScheduler+0xd4>)
 8004168:	2207      	movs	r2, #7
 800416a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416c:	e009      	b.n	8004182 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <xPortStartScheduler+0xd4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <xPortStartScheduler+0xd4>)
 8004176:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d0ef      	beq.n	800416e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <xPortStartScheduler+0xd4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	d009      	beq.n	80041ae <xPortStartScheduler+0x76>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	e7fe      	b.n	80041ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <xPortStartScheduler+0xd4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <xPortStartScheduler+0xd4>)
 80041b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <xPortStartScheduler+0xd4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041c0:	4a12      	ldr	r2, [pc, #72]	; (800420c <xPortStartScheduler+0xd4>)
 80041c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <xPortStartScheduler+0xd8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <xPortStartScheduler+0xd8>)
 80041d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <xPortStartScheduler+0xd8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <xPortStartScheduler+0xd8>)
 80041de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041e4:	f000 f8b0 	bl	8004348 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <xPortStartScheduler+0xdc>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041ee:	f7ff ff93 	bl	8004118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041f2:	f7ff fd8f 	bl	8003d14 <vTaskSwitchContext>
	prvTaskExitError();
 80041f6:	f7ff ff4d 	bl	8004094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	e000e400 	.word	0xe000e400
 8004208:	20000410 	.word	0x20000410
 800420c:	20000414 	.word	0x20000414
 8004210:	e000ed20 	.word	0xe000ed20
 8004214:	20000014 	.word	0x20000014

08004218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <vPortEnterCritical+0x54>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a0d      	ldr	r2, [pc, #52]	; (800426c <vPortEnterCritical+0x54>)
 8004238:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <vPortEnterCritical+0x54>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10e      	bne.n	8004260 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <vPortEnterCritical+0x58>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <vPortEnterCritical+0x48>
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	e7fe      	b.n	800425e <vPortEnterCritical+0x46>
	}
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000014 	.word	0x20000014
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <vPortExitCritical+0x48>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <vPortExitCritical+0x22>
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e7fe      	b.n	8004294 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <vPortExitCritical+0x48>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <vPortExitCritical+0x48>)
 800429e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <vPortExitCritical+0x48>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <vPortExitCritical+0x3e>
 80042a8:	2300      	movs	r3, #0
 80042aa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	20000014 	.word	0x20000014

080042c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042c0:	f3ef 8009 	mrs	r0, PSP
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <pxCurrentTCBConst>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042d0:	6010      	str	r0, [r2, #0]
 80042d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042da:	f380 8811 	msr	BASEPRI, r0
 80042de:	f7ff fd19 	bl	8003d14 <vTaskSwitchContext>
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042f6:	f380 8809 	msr	PSP, r0
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	4770      	bx	lr

08004300 <pxCurrentTCBConst>:
 8004300:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004320:	f7ff fc3c 	bl	8003b9c <xTaskIncrementTick>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <SysTick_Handler+0x3c>)
 800432c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	2300      	movs	r3, #0
 8004334:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <vPortSetupTimerInterrupt+0x30>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <vPortSetupTimerInterrupt+0x34>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <vPortSetupTimerInterrupt+0x38>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a09      	ldr	r2, [pc, #36]	; (8004384 <vPortSetupTimerInterrupt+0x3c>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <vPortSetupTimerInterrupt+0x40>)
 8004366:	3b01      	subs	r3, #1
 8004368:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800436a:	4b03      	ldr	r3, [pc, #12]	; (8004378 <vPortSetupTimerInterrupt+0x30>)
 800436c:	2207      	movs	r2, #7
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	e000e010 	.word	0xe000e010
 800437c:	e000e018 	.word	0xe000e018
 8004380:	20000008 	.word	0x20000008
 8004384:	10624dd3 	.word	0x10624dd3
 8004388:	e000e014 	.word	0xe000e014

0800438c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	3308      	adds	r3, #8
 80043aa:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80043ac:	f7ff fb4c 	bl	8003a48 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80043b0:	4b16      	ldr	r3, [pc, #88]	; (800440c <pvPortMalloc+0x80>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <pvPortMalloc+0x84>)
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	461a      	mov	r2, r3
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <pvPortMalloc+0x80>)
 80043c2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <pvPortMalloc+0x88>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	f640 32f7 	movw	r2, #3063	; 0xbf7
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d813      	bhi.n	80043fc <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <pvPortMalloc+0x88>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	441a      	add	r2, r3
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <pvPortMalloc+0x88>)
 80043de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d90b      	bls.n	80043fc <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <pvPortMalloc+0x80>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <pvPortMalloc+0x88>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <pvPortMalloc+0x88>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	4a06      	ldr	r2, [pc, #24]	; (8004414 <pvPortMalloc+0x88>)
 80043fa:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043fc:	f7ff fb32 	bl	8003a64 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	2000101c 	.word	0x2000101c
 8004410:	20000420 	.word	0x20000420
 8004414:	20001018 	.word	0x20001018

08004418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <vPortFree+0x22>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e7fe      	b.n	8004438 <vPortFree+0x20>
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	2500      	movs	r5, #0
 8004448:	4e0c      	ldr	r6, [pc, #48]	; (800447c <__libc_init_array+0x38>)
 800444a:	4c0d      	ldr	r4, [pc, #52]	; (8004480 <__libc_init_array+0x3c>)
 800444c:	1ba4      	subs	r4, r4, r6
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	42a5      	cmp	r5, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	f000 f8a2 	bl	800459c <_init>
 8004458:	2500      	movs	r5, #0
 800445a:	4e0a      	ldr	r6, [pc, #40]	; (8004484 <__libc_init_array+0x40>)
 800445c:	4c0a      	ldr	r4, [pc, #40]	; (8004488 <__libc_init_array+0x44>)
 800445e:	1ba4      	subs	r4, r4, r6
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	42a5      	cmp	r5, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800446c:	4798      	blx	r3
 800446e:	3501      	adds	r5, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004476:	4798      	blx	r3
 8004478:	3501      	adds	r5, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	080049cc 	.word	0x080049cc
 8004480:	080049cc 	.word	0x080049cc
 8004484:	080049cc 	.word	0x080049cc
 8004488:	080049d0 	.word	0x080049d0

0800448c <__itoa>:
 800448c:	1e93      	subs	r3, r2, #2
 800448e:	2b22      	cmp	r3, #34	; 0x22
 8004490:	b510      	push	{r4, lr}
 8004492:	460c      	mov	r4, r1
 8004494:	d904      	bls.n	80044a0 <__itoa+0x14>
 8004496:	2300      	movs	r3, #0
 8004498:	461c      	mov	r4, r3
 800449a:	700b      	strb	r3, [r1, #0]
 800449c:	4620      	mov	r0, r4
 800449e:	bd10      	pop	{r4, pc}
 80044a0:	2a0a      	cmp	r2, #10
 80044a2:	d109      	bne.n	80044b8 <__itoa+0x2c>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	da07      	bge.n	80044b8 <__itoa+0x2c>
 80044a8:	232d      	movs	r3, #45	; 0x2d
 80044aa:	700b      	strb	r3, [r1, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	4240      	negs	r0, r0
 80044b0:	4421      	add	r1, r4
 80044b2:	f000 f835 	bl	8004520 <__utoa>
 80044b6:	e7f1      	b.n	800449c <__itoa+0x10>
 80044b8:	2100      	movs	r1, #0
 80044ba:	e7f9      	b.n	80044b0 <__itoa+0x24>

080044bc <itoa>:
 80044bc:	f7ff bfe6 	b.w	800448c <__itoa>

080044c0 <memset>:
 80044c0:	4603      	mov	r3, r0
 80044c2:	4402      	add	r2, r0
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d100      	bne.n	80044ca <memset+0xa>
 80044c8:	4770      	bx	lr
 80044ca:	f803 1b01 	strb.w	r1, [r3], #1
 80044ce:	e7f9      	b.n	80044c4 <memset+0x4>

080044d0 <strncmp>:
 80044d0:	b510      	push	{r4, lr}
 80044d2:	b16a      	cbz	r2, 80044f0 <strncmp+0x20>
 80044d4:	3901      	subs	r1, #1
 80044d6:	1884      	adds	r4, r0, r2
 80044d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80044dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <strncmp+0x1c>
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d001      	beq.n	80044ec <strncmp+0x1c>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f5      	bne.n	80044d8 <strncmp+0x8>
 80044ec:	1a98      	subs	r0, r3, r2
 80044ee:	bd10      	pop	{r4, pc}
 80044f0:	4610      	mov	r0, r2
 80044f2:	e7fc      	b.n	80044ee <strncmp+0x1e>

080044f4 <strncpy>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	4604      	mov	r4, r0
 80044f8:	3901      	subs	r1, #1
 80044fa:	b902      	cbnz	r2, 80044fe <strncpy+0xa>
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	4623      	mov	r3, r4
 8004500:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8004504:	1e56      	subs	r6, r2, #1
 8004506:	f803 5b01 	strb.w	r5, [r3], #1
 800450a:	b92d      	cbnz	r5, 8004518 <strncpy+0x24>
 800450c:	4414      	add	r4, r2
 800450e:	42a3      	cmp	r3, r4
 8004510:	d0f4      	beq.n	80044fc <strncpy+0x8>
 8004512:	f803 5b01 	strb.w	r5, [r3], #1
 8004516:	e7fa      	b.n	800450e <strncpy+0x1a>
 8004518:	461c      	mov	r4, r3
 800451a:	4632      	mov	r2, r6
 800451c:	e7ed      	b.n	80044fa <strncpy+0x6>
	...

08004520 <__utoa>:
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004522:	b08b      	sub	sp, #44	; 0x2c
 8004524:	4605      	mov	r5, r0
 8004526:	460c      	mov	r4, r1
 8004528:	466e      	mov	r6, sp
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <__utoa+0x78>)
 800452c:	f103 0c20 	add.w	ip, r3, #32
 8004530:	4637      	mov	r7, r6
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	3308      	adds	r3, #8
 8004538:	c703      	stmia	r7!, {r0, r1}
 800453a:	4563      	cmp	r3, ip
 800453c:	463e      	mov	r6, r7
 800453e:	d1f7      	bne.n	8004530 <__utoa+0x10>
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	791b      	ldrb	r3, [r3, #4]
 8004544:	6038      	str	r0, [r7, #0]
 8004546:	713b      	strb	r3, [r7, #4]
 8004548:	1e93      	subs	r3, r2, #2
 800454a:	2b22      	cmp	r3, #34	; 0x22
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	d904      	bls.n	800455c <__utoa+0x3c>
 8004552:	7023      	strb	r3, [r4, #0]
 8004554:	461c      	mov	r4, r3
 8004556:	4620      	mov	r0, r4
 8004558:	b00b      	add	sp, #44	; 0x2c
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	1e66      	subs	r6, r4, #1
 800455e:	fbb5 f0f2 	udiv	r0, r5, r2
 8004562:	fb02 5510 	mls	r5, r2, r0, r5
 8004566:	af0a      	add	r7, sp, #40	; 0x28
 8004568:	443d      	add	r5, r7
 800456a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	f806 5f01 	strb.w	r5, [r6, #1]!
 8004574:	4605      	mov	r5, r0
 8004576:	b968      	cbnz	r0, 8004594 <__utoa+0x74>
 8004578:	4622      	mov	r2, r4
 800457a:	5460      	strb	r0, [r4, r1]
 800457c:	4423      	add	r3, r4
 800457e:	1b19      	subs	r1, r3, r4
 8004580:	1b10      	subs	r0, r2, r4
 8004582:	4281      	cmp	r1, r0
 8004584:	dde7      	ble.n	8004556 <__utoa+0x36>
 8004586:	7811      	ldrb	r1, [r2, #0]
 8004588:	7818      	ldrb	r0, [r3, #0]
 800458a:	f802 0b01 	strb.w	r0, [r2], #1
 800458e:	f803 1901 	strb.w	r1, [r3], #-1
 8004592:	e7f4      	b.n	800457e <__utoa+0x5e>
 8004594:	460b      	mov	r3, r1
 8004596:	e7e2      	b.n	800455e <__utoa+0x3e>
 8004598:	080049a4 	.word	0x080049a4

0800459c <_init>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr

080045a8 <_fini>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr
